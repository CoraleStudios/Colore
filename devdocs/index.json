{
  "api/Corale.Colore.Native.html": {
    "href": "api/Corale.Colore.Native.html",
    "title": "Namespace Corale.Colore.Native",
    "keywords": "Namespace Corale.Colore.Native Classes NativeCallException Thrown when a native function returns an erroneous result value."
  },
  "api/Corale.Colore.Rest.IRestClient.html": {
    "href": "api/Corale.Colore.Rest.IRestClient.html",
    "title": "Interface IRestClient",
    "keywords": "Interface IRestClient Represents a REST API client able to do basic HTTP requests and return response data. Namespace : Corale.Colore.Rest Assembly : Corale.Colore.dll Syntax public interface IRestClient : IDisposable Properties BaseAddress Gets or sets the base address where calls will be routed. Declaration Uri BaseAddress { get; set; } Property Value Type Description System.Uri Methods DeleteAsync<T>(String) Performs a DELETE request to the specified resource. Declaration Task<IRestResponse<T>> DeleteAsync<T>(string resource) Parameters Type Name Description System.String resource Resource path. Returns Type Description System.Threading.Tasks.Task < IRestResponse <T>> An instance of IRestResponse<TData> . Type Parameters Name Description T The type of response to expect. DeleteAsync<T>(String, Object) Performs a DELETE request to the specified resource with the provided data. Declaration Task<IRestResponse<T>> DeleteAsync<T>(string resource, object data) Parameters Type Name Description System.String resource Resource path. System.Object data Request data. Returns Type Description System.Threading.Tasks.Task < IRestResponse <T>> An instance of IRestResponse<TData> . Type Parameters Name Description T The type of response to expect. PostAsync<T>(String, Object) Performs a POST request to the specified resource with the provided data. Declaration Task<IRestResponse<T>> PostAsync<T>(string resource, object data) Parameters Type Name Description System.String resource Resource path. System.Object data Request data. Returns Type Description System.Threading.Tasks.Task < IRestResponse <T>> An instance of IRestResponse<TData> . Type Parameters Name Description T The type of response to expect. PutAsync<T>(String) Performs a PUT request to the specified resource without any data. Declaration Task<IRestResponse<T>> PutAsync<T>(string resource) Parameters Type Name Description System.String resource Resource path. Returns Type Description System.Threading.Tasks.Task < IRestResponse <T>> An instance of IRestResponse<TData> . Type Parameters Name Description T The type of response to expect. PutAsync<T>(String, Object) Performs a PUT request to the specified resource with the provided data. Declaration Task<IRestResponse<T>> PutAsync<T>(string resource, object data) Parameters Type Name Description System.String resource Resource path. System.Object data Request data. Returns Type Description System.Threading.Tasks.Task < IRestResponse <T>> An instance of IRestResponse<TData> . Type Parameters Name Description T The type of response to expect."
  },
  "api/Corale.Colore.Rest.IRestResponse-1.html": {
    "href": "api/Corale.Colore.Rest.IRestResponse-1.html",
    "title": "Interface IRestResponse<TData>",
    "keywords": "Interface IRestResponse<TData> Represents a response from calling a REST API. Namespace : Corale.Colore.Rest Assembly : Corale.Colore.dll Syntax public interface IRestResponse<out TData> Type Parameters Name Description TData The type contained in this response. Properties Content Gets the body content as a System.String , or null if no content. Declaration string Content { get; } Property Value Type Description System.String Data Gets the data returned from the request. Declaration TData Data { get; } Property Value Type Description TData IsSuccessful Gets a value indicating whether the REST request was successful. Declaration bool IsSuccessful { get; } Property Value Type Description System.Boolean Status Gets the HTTP status of the response. Declaration HttpStatusCode Status { get; } Property Value Type Description System.Net.HttpStatusCode Methods Deserialize<T>() Deserializes the response content into the specified type. Declaration T Deserialize<T>() Returns Type Description T An instance of T . Type Parameters Name Description T The type to deserialize into."
  },
  "api/Corale.Colore.Rest.RestException.html": {
    "href": "api/Corale.Colore.Rest.RestException.html",
    "title": "Class RestException",
    "keywords": "Class RestException Represents an error in the Chroma REST API. Inheritance System.Exception ColoreException ApiException RestException Inherited Members ApiException.Result Namespace : Corale.Colore.Rest Assembly : Corale.Colore.dll Syntax public sealed class RestException : ApiException Constructors RestException() Initializes a new instance of the RestException class. Declaration public RestException() RestException(String) Initializes a new instance of the RestException class. Declaration public RestException(string message) Parameters Type Name Description System.String message Exception message. RestException(String, Result, Uri, HttpStatusCode, Object) Initializes a new instance of the RestException class. Declaration public RestException(string message, Result result, Uri uri, HttpStatusCode statusCode, object restData = null) Parameters Type Name Description System.String message Exception message. Result result The result code returned from the Chroma SDK. System.Uri uri The REST API URI where the exception occurred. System.Net.HttpStatusCode statusCode HTTP status code returned by the API. System.Object restData Any data returned in the API response body. RestException(String, Exception) Initializes a new instance of the RestException class. Declaration public RestException(string message, Exception innerException) Parameters Type Name Description System.String message Exception message. System.Exception innerException Inner exception. Properties RestData Gets the data (if any) returned by the API. Declaration public object RestData { get; } Property Value Type Description System.Object StatusCode Gets the System.Net.HttpStatusCode returned by the API. Declaration public HttpStatusCode StatusCode { get; } Property Value Type Description System.Net.HttpStatusCode Uri Gets the Uri called which caused the exception. Declaration public Uri Uri { get; } Property Value Type Description System.Uri"
  },
  "api/Corale.Colore.Rest.html": {
    "href": "api/Corale.Colore.Rest.html",
    "title": "Namespace Corale.Colore.Rest",
    "keywords": "Namespace Corale.Colore.Rest Classes RestException Represents an error in the Chroma REST API. Interfaces IRestClient Represents a REST API client able to do basic HTTP requests and return response data. IRestResponse<TData> Represents a response from calling a REST API."
  },
  "api/Corale.Colore.UnsupportedDeviceException.html": {
    "href": "api/Corale.Colore.UnsupportedDeviceException.html",
    "title": "Class UnsupportedDeviceException",
    "keywords": "Class UnsupportedDeviceException Thrown when an invalid System.Guid is passed to the constructor of Corale.Colore.Implementations.GenericDeviceImplementation . Inheritance System.Exception ColoreException UnsupportedDeviceException Namespace : Corale.Colore Assembly : Corale.Colore.dll Syntax public sealed class UnsupportedDeviceException : ColoreException Constructors UnsupportedDeviceException(Guid, Exception) Initializes a new instance of the UnsupportedDeviceException class. Declaration public UnsupportedDeviceException(Guid deviceId, Exception innerException = null) Parameters Type Name Description System.Guid deviceId The System.Guid of the device. System.Exception innerException Inner exception object. Properties DeviceId Gets the System.Guid of the device. Declaration public Guid DeviceId { get; } Property Value Type Description System.Guid"
  },
  "api/Corale.Colore.html": {
    "href": "api/Corale.Colore.html",
    "title": "Namespace Corale.Colore",
    "keywords": "Namespace Corale.Colore Classes ColoreException Generic Colore library exception. ColoreProvider Provides helper methods to instantiate a new IChroma instance. UnsupportedDeviceException Thrown when an invalid System.Guid is passed to the constructor of Corale.Colore.Implementations.GenericDeviceImplementation . Interfaces IChroma Interface for basic Chroma functionality. IChromaLink Interface for Chroma Link functionality. IDevice Interface for functionality common with all devices. IGenericDevice Interface for generic devices. IHeadset Interface for headset functionality. IKeyboard Interface for keyboard functionality. IKeypad Interface for keypad functions. IMouse Interface for mouse functionality. IMousepad Interface for mouse pad functionality."
  },
  "api/Corale.Colore.Api.ApiException.html": {
    "href": "api/Corale.Colore.Api.ApiException.html",
    "title": "Class ApiException",
    "keywords": "Class ApiException Thrown when a cal to an API function fails. Inheritance System.Exception ColoreException ApiException NativeCallException RestException Namespace : Corale.Colore.Api Assembly : Corale.Colore.dll Syntax public class ApiException : ColoreException Constructors ApiException() Initializes a new instance of the ApiException class. Declaration public ApiException() ApiException(String) Initializes a new instance of the ApiException class. Declaration public ApiException(string message) Parameters Type Name Description System.String message Message describing the exception. ApiException(String, Result) Initializes a new instance of the ApiException class. Declaration public ApiException(string message, Result result) Parameters Type Name Description System.String message An error message detailing the exception. Result result The result code returned from the SDK. ApiException(String, Exception) Initializes a new instance of the ApiException class. Declaration public ApiException(string message, Exception innerException) Parameters Type Name Description System.String message Message describing the exception. System.Exception innerException Inner exception Properties Result Gets the result code returned by the SDK. Declaration public Result Result { get; } Property Value Type Description Result"
  },
  "api/Corale.Colore.ColoreException.html": {
    "href": "api/Corale.Colore.ColoreException.html",
    "title": "Class ColoreException",
    "keywords": "Class ColoreException Generic Colore library exception. Inheritance System.Exception ColoreException ApiException UnsupportedDeviceException Namespace : Corale.Colore Assembly : Corale.Colore.dll Syntax public class ColoreException : Exception Constructors ColoreException() Initializes a new instance of the ColoreException class. Declaration public ColoreException() ColoreException(String) Initializes a new instance of the ColoreException class. Declaration public ColoreException(string message) Parameters Type Name Description System.String message Message describing the exception. ColoreException(String, Exception) Initializes a new instance of the ColoreException class. Declaration public ColoreException(string message, Exception innerException) Parameters Type Name Description System.String message Exception message. System.Exception innerException Inner exception object."
  },
  "api/Corale.Colore.Data.AppInfo.html": {
    "href": "api/Corale.Colore.Data.AppInfo.html",
    "title": "Class AppInfo",
    "keywords": "Class AppInfo Contains information about an application wishing to use the Chroma SDK. Inheritance System.Object AppInfo Namespace : Corale.Colore.Data Assembly : Corale.Colore.dll Syntax public sealed class AppInfo : Object Constructors AppInfo(String, String, String, String, Category) Initializes a new instance of the AppInfo class, set to support all available devices. Declaration public AppInfo(string title, string description, string authorName, string authorContact, Category category) Parameters Type Name Description System.String title Application title. System.String description Application description. System.String authorName Name of the application author. System.String authorContact Contact information for the author. Category category Application category. AppInfo(String, String, String, String, IEnumerable<DeviceType>, Category) Initializes a new instance of the AppInfo class. Declaration public AppInfo(string title, string description, string authorName, string authorContact, IEnumerable<DeviceType> supportedDevices, Category category) Parameters Type Name Description System.String title Application title. System.String description Application description. System.String authorName Name of the application author. System.String authorContact Contact information for the author. System.Collections.Generic.IEnumerable < DeviceType > supportedDevices List of devices this application supports. Category category Application category. Properties Author Gets author information for this application. Declaration public Author Author { get; } Property Value Type Description Author Category Gets the category of this application. Declaration public Category Category { get; } Property Value Type Description Category Description Gets the application description. Declaration public string Description { get; } Property Value Type Description System.String SupportedDevices Gets a list of devices this application supports. Declaration public IEnumerable<DeviceType> SupportedDevices { get; } Property Value Type Description System.Collections.Generic.IEnumerable < DeviceType > Remarks Newtonsoft.Json cannot deserialize into an System.Collections.Generic.IEnumerable<> , but since we only serialize this class, it will not be an issue. Title Gets the title of this application. Declaration public string Title { get; } Property Value Type Description System.String"
  },
  "api/Corale.Colore.Data.Author.html": {
    "href": "api/Corale.Colore.Data.Author.html",
    "title": "Class Author",
    "keywords": "Class Author Contains author information for a Chroma application. Inheritance System.Object Author Namespace : Corale.Colore.Data Assembly : Corale.Colore.dll Syntax public sealed class Author : Object Constructors Author(String, String) Initializes a new instance of the Author class. Declaration public Author(string name, string contact) Parameters Type Name Description System.String name Name of the author. System.String contact Contact information for the author. Properties Contact Gets contact information for the author. Declaration public string Contact { get; } Property Value Type Description System.String Name Gets the name of the application author. Declaration public string Name { get; } Property Value Type Description System.String"
  },
  "api/Corale.Colore.Data.Constants.html": {
    "href": "api/Corale.Colore.Data.Constants.html",
    "title": "Class Constants",
    "keywords": "Class Constants The definitions of generic constant values used in the project Inheritance System.Object Constants Namespace : Corale.Colore.Data Assembly : Corale.Colore.dll Syntax public static class Constants : Object Fields MaxColors Maximum number of color entries for a generic custom effect. Declaration public const int MaxColors = 900 Field Value Type Description System.Int32 MaxColumns Maximum number of columns for a generic custom effect. Declaration public const int MaxColumns = 30 Field Value Type Description System.Int32 MaxRows Maximum number of rows for a generic custom effect. Declaration public const int MaxRows = 30 Field Value Type Description System.Int32 WmChromaEvent Used by Razer code to send Chroma event messages. Declaration public const uint WmChromaEvent = 40960U Field Value Type Description System.UInt32"
  },
  "api/Corale.Colore.Data.DeviceInfo.html": {
    "href": "api/Corale.Colore.Data.DeviceInfo.html",
    "title": "Class DeviceInfo",
    "keywords": "Class DeviceInfo Contains information about a device. Inheritance System.ValueType DeviceInfo Implements System.IEquatable < DeviceInfo > Namespace : Corale.Colore.Data Assembly : Corale.Colore.dll Syntax public sealed class DeviceInfo : ValueType, IEquatable<DeviceInfo> Properties Connected Gets a value indicating whether the device is currently connected. Declaration public bool Connected { get; } Property Value Type Description System.Boolean Description Gets a description of the device. Declaration public string Description { get; } Property Value Type Description System.String Id Gets the unique ID of the device. Declaration public Guid Id { get; } Property Value Type Description System.Guid Name Gets the device name. Declaration public string Name { get; } Property Value Type Description System.String Type Gets the type of the device. Declaration public DeviceType Type { get; } Property Value Type Description DeviceType Methods Equals(DeviceInfo) Indicates whether the current object is equal to another object of the same type. Declaration public bool Equals(DeviceInfo other) Parameters Type Name Description DeviceInfo other An object to compare with this object. Returns Type Description System.Boolean true if the current object is equal to the other parameter; otherwise, false . Equals(Object) Indicates whether this instance and a specified object are equal. Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj The object to compare with the current instance. Returns Type Description System.Boolean true if obj and this instance are the same type and represent the same value; otherwise, false . GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description System.Int32 A 32-bit signed integer that is the hash code for this instance. Operators Equality(DeviceInfo, Object) Compares an instance of DeviceInfo with another object for equality. Declaration public static bool operator ==(DeviceInfo left, object right) Parameters Type Name Description DeviceInfo left The left operand, an instance of DeviceInfo . System.Object right The right operand, any type of object. Returns Type Description System.Boolean true if the two objects are equal, otherwise false . Inequality(DeviceInfo, Object) Compares an instance of DeviceInfo with another object for inequality. Declaration public static bool operator !=(DeviceInfo left, object right) Parameters Type Name Description DeviceInfo left The left operand, an instance of DeviceInfo . System.Object right The right operand, any type of object. Returns Type Description System.Boolean true if the two objects are not equal, otherwise false . Implements System.IEquatable<>"
  },
  "api/Corale.Colore.Data.Result.html": {
    "href": "api/Corale.Colore.Data.Result.html",
    "title": "Class Result",
    "keywords": "Class Result Struct for containing the result of running a native Chroma SDK function. Inheritance System.ValueType Result Implements System.IEquatable < System.Int32 > System.IEquatable < Result > Namespace : Corale.Colore.Data Assembly : Corale.Colore.dll Syntax public sealed class Result : ValueType, IEquatable<int>, IEquatable<Result> Remarks RZRESULT is a typedef of LONG on C-side. LONG is always 32-bit in WinAPI. This means we don't need to have architecture-dependent base type. Constructors Result(Int32) Initializes a new instance of the Result struct. Declaration public Result(int value) Parameters Type Name Description System.Int32 value Value to store. Fields RzAccessDenied Access denied. Declaration public static readonly Result RzAccessDenied Field Value Type Description Result RzFailed Generic fail error. Declaration public static readonly Result RzFailed Field Value Type Description Result RzInvalid Invalid error. Declaration public static readonly Result RzInvalid Field Value Type Description Result RzInvalidParameter Invalid parameter passed to function. Declaration public static readonly Result RzInvalidParameter Field Value Type Description Result RzNotSupported The requested operation is not supported. Declaration public static readonly Result RzNotSupported Field Value Type Description Result RzRequestAborted The request was aborted. Declaration public static readonly Result RzRequestAborted Field Value Type Description Result RzResourceDisabled Resource not available or disabled. Declaration public static readonly Result RzResourceDisabled Field Value Type Description Result RzSingleInstanceApp Cannot start more than one instance of the specified program. Declaration public static readonly Result RzSingleInstanceApp Field Value Type Description Result RzSuccess Returned when a function is successful. Declaration public static readonly Result RzSuccess Field Value Type Description Result Properties Description Gets the help description for the current error value. Declaration public string Description { get; } Property Value Type Description System.String Failed Gets a value indicating whether the result means failure. Declaration public bool Failed { get; } Property Value Type Description System.Boolean IsTrue Gets a value indicating whether this instance of Result is truthy. Declaration public bool IsTrue { get; } Property Value Type Description System.Boolean true if this is a successful result, otherwise false . Name Gets the name of the error as defined in source code. Declaration public string Name { get; } Property Value Type Description System.String Success Gets a value indicating whether the result was a success. Declaration public bool Success { get; } Property Value Type Description System.Boolean Value Gets the internal result value. Declaration public int Value { get; } Property Value Type Description System.Int32 Methods Equals(Result) Indicates whether the current object is equal to another object of the same type. Declaration public bool Equals(Result other) Parameters Type Name Description Result other An object to compare with this object. Returns Type Description System.Boolean true if the current object is equal to the other parameter; otherwise, false . Equals(Int32) Indicates whether the internal value of the current Result struct is equal to another value. Declaration public bool Equals(int other) Parameters Type Name Description System.Int32 other A value to compare with this object's internal value. Returns Type Description System.Boolean true if the internal value is equal to the other parameter, otherwise false . Equals(Object) Indicates whether this instance and a specified object are equal. Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Another object to compare to. Returns Type Description System.Boolean true if obj and this instance are the same type and represent the same value; otherwise, false . FromResult(Int32) Convert an integer value to a Result object. Declaration public static Result FromResult(int value) Parameters Type Name Description System.Int32 value The value to convert. Returns Type Description Result An instance of Result . GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description System.Int32 A 32-bit signed integer that is the hash code for this instance. ToBoolean() Converts this Result to a boolean value. Declaration public bool ToBoolean() Returns Type Description System.Boolean The result of the conversion. ToInt32() Converts this instance of Result to an integer value. Declaration public int ToInt32() Returns Type Description System.Int32 The integer value of this Result . ToString() Returns a string representation of the result. Declaration public override string ToString() Returns Type Description System.String A System.String containing a string representation of the result complete with name, description, and numeric value. Operators Equality(Result, Object) Indicates whether an instance of the Result struct is equal to another object. Declaration public static bool operator ==(Result left, object right) Parameters Type Name Description Result left Left operand, an instance of the Result struct. System.Object right Right operand, an object to compare with. Returns Type Description System.Boolean true if the two objects are equal, otherwise false . False(Result) Converts a Result object to false . Declaration public static bool operator false (Result result) Parameters Type Name Description Result result Result object to convert. Returns Type Description System.Boolean false if the Result object represents a boolean false value, otherwise true . Implicit(Result to Boolean) Converts an instance of the Result struct to its boolean equivalent. Declaration public static implicit operator bool (Result result) Parameters Type Name Description Result result The Result to convert. Returns Type Description System.Boolean true if the result represents a true value (success), otherwise false (failure). Implicit(Result to Int32) Converts a Result struct to its integer equivalent. Declaration public static implicit operator int (Result result) Parameters Type Name Description Result result An instance of the Result to convert. Returns Type Description System.Int32 The integer equivalent of the result . Implicit(Int32 to Result) Converts an integer value to its equivalent Result object. Declaration public static implicit operator Result(int value) Parameters Type Name Description System.Int32 value The value to convert. Returns Type Description Result The Result equivalent of the value . Inequality(Result, Object) Indicates whether an instance of the Result struct and another object are not equal. Declaration public static bool operator !=(Result left, object right) Parameters Type Name Description Result left Left operand, an instance of the Result struct. System.Object right Right operand, an object to compare to. Returns Type Description System.Boolean true if the two objects are not equal, otherwise false . True(Result) Converts a Result object to a boolean true value. Declaration public static bool operator true (Result result) Parameters Type Name Description Result result Object to convert. Returns Type Description System.Boolean true if the object represents a boolean true value, false otherwise. Implements System.IEquatable<> System.IEquatable<>"
  },
  "api/Corale.Colore.Data.SdkVersion.html": {
    "href": "api/Corale.Colore.Data.SdkVersion.html",
    "title": "Class SdkVersion",
    "keywords": "Class SdkVersion Describes an SDK version. Inheritance System.ValueType SdkVersion Implements System.IEquatable < SdkVersion > System.IComparable < SdkVersion > System.IComparable Namespace : Corale.Colore.Data Assembly : Corale.Colore.dll Syntax public sealed class SdkVersion : ValueType, IEquatable<SdkVersion>, IComparable<SdkVersion>, IComparable Constructors SdkVersion(Int32, Int32, Int32) Initializes a new instance of the SdkVersion struct. Declaration public SdkVersion(int major, int minor, int revision) Parameters Type Name Description System.Int32 major The major component of the version. System.Int32 minor The minor component of the version. System.Int32 revision The revision component of the version. Properties Major Gets the major part of the version. Declaration public int Major { get; } Property Value Type Description System.Int32 Minor Gets the minor part of the version. Declaration public int Minor { get; } Property Value Type Description System.Int32 Revision Gets the revision part of the version. Declaration public int Revision { get; } Property Value Type Description System.Int32 Methods CompareTo(SdkVersion) Compares the current object with another object of the same type. Declaration public int CompareTo(SdkVersion other) Parameters Type Name Description SdkVersion other An object to compare with this object. Returns Type Description System.Int32 A 32-bit signed integer that indicates the relative order of the objects being compared. The return value has the following meanings: Less than zeroThis object is less than the other parameter ZeroThis object is equal to other Greater than zeroThis object is greater than other CompareTo(Object) Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object. Declaration public int CompareTo(object obj) Parameters Type Name Description System.Object obj An object to compare with this instance. Returns Type Description System.Int32 A 32-bit signed integer that indicates the relative order of the objects being compared. The return value has these meanings: Less than zeroThis object is less than the obj parameter ZeroThis object is equal to obj Greater than zeroThis object is greater than obj Exceptions Type Condition System.ArgumentException obj is not the same type as this instance. Equals(SdkVersion) Indicates whether the current object is equal to another object of the same type. Declaration public bool Equals(SdkVersion other) Parameters Type Name Description SdkVersion other An object to compare with this object. Returns Type Description System.Boolean true if the current object is equal to the other parameter; otherwise, false. Equals(Object) Indicates whether this instance and a specified object are equal. Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Another object to compare to. Returns Type Description System.Boolean true if obj and this instance are the same type and represent the same value; otherwise, false. GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description System.Int32 A 32-bit signed integer that is the hash code for this instance. ToString() Returns the string representation of this SDK version. Declaration public override string ToString() Returns Type Description System.String A System.String representing this struct instance. Operators Equality(SdkVersion, Object) Compares an instance of SdkVersion with another object for equality. Declaration public static bool operator ==(SdkVersion left, object right) Parameters Type Name Description SdkVersion left The left operand, an instance of SdkVersion . System.Object right The right operand, any type of object. Returns Type Description System.Boolean true if the two objects are equal, otherwise false . GreaterThan(SdkVersion, Object) Checks if an instance of SdkVersion is considered greater than another object. Declaration public static bool operator>(SdkVersion left, object right) Parameters Type Name Description SdkVersion left The left operand, an instance of SdkVersion . System.Object right The right operand, any type of object. Returns Type Description System.Boolean true if left is greater than right , otherwise false . GreaterThanOrEqual(SdkVersion, Object) Checks if an instance of SdkVersion is considered to be greater than or equal to another object. Declaration public static bool operator >=(SdkVersion left, object right) Parameters Type Name Description SdkVersion left The left operand, an instance of SdkVersion . System.Object right The right operand, any type of object. Returns Type Description System.Boolean true if left is greater than or equal to right , otherwise false . Inequality(SdkVersion, Object) Compares an instance of SdkVersion with another object for inequality. Declaration public static bool operator !=(SdkVersion left, object right) Parameters Type Name Description SdkVersion left The left operand, an instance of SdkVersion . System.Object right The right operand, any type of object. Returns Type Description System.Boolean true if the two objects are not equal, otherwise false . LessThan(SdkVersion, Object) Checks if an instance of SdkVersion is considered less than another object. Declaration public static bool operator <(SdkVersion left, object right) Parameters Type Name Description SdkVersion left The left operand, an instance of SdkVersion . System.Object right The right operand, any type of object. Returns Type Description System.Boolean true if left is less than right , otherwise false . LessThanOrEqual(SdkVersion, Object) Checks if an instance of SdkVersion is considered to be less than or equal to another object. Declaration public static bool operator <=(SdkVersion left, object right) Parameters Type Name Description SdkVersion left The left operand, an instance of SdkVersion . System.Object right The right operand, any type of object. Returns Type Description System.Boolean true if left is less than or equal to right , otherwise false . Implements System.IEquatable<> System.IComparable<> System.IComparable"
  },
  "api/Corale.Colore.Effects.ChromaLink.Custom.html": {
    "href": "api/Corale.Colore.Effects.ChromaLink.Custom.html",
    "title": "Class Custom",
    "keywords": "Class Custom Custom effect. Inheritance System.ValueType Custom Implements System.IEquatable < Custom > System.IEquatable < Color []> Namespace : Corale.Colore.Effects.ChromaLink Assembly : Corale.Colore.dll Syntax public sealed class Custom : ValueType, IEquatable<Custom>, IEquatable<Color[]> Constructors Custom(Color) Initializes a new instance of the Custom struct with every position set to a specific color. Declaration public Custom(Color color) Parameters Type Name Description Color color The Color to set each position to. Custom(Color[]) Initializes a new instance of the Custom struct. Declaration public Custom(Color[] colors) Parameters Type Name Description Color [] colors The colors to use. Exceptions Type Condition System.ArgumentException Thrown if the colors array supplied is of an incorrect size. Custom(Custom) Initializes a new instance of the Custom struct with color values copied from another struct of the same type. Declaration public Custom(Custom other) Parameters Type Name Description Custom other The struct to copy data from. Custom(IList<Color>) Initializes a new instance of the Custom struct. Declaration public Custom(IList<Color> colors) Parameters Type Name Description System.Collections.Generic.IList < Color > colors The colors to use. Exceptions Type Condition System.ArgumentException Thrown if the colors array supplied is of an invalid size. Properties Item[Int32] Gets or sets a position in the custom array. Declaration public Color this[int index] { get; set; } Parameters Type Name Description System.Int32 index The index to access, zero indexed. Property Value Type Description Color The Color at the specified position. Methods Clear() Clears the colors from the array, setting them to Black . Declaration public void Clear() Clone() Returns a copy of this struct. Declaration public Custom Clone() Returns Type Description Custom A copy of this struct. Create() Creates a new empty Custom struct. Declaration public static Custom Create() Returns Type Description Custom An instance of Custom filled with the color black. Equals(Color[]) Indicates whether the current object is equal to an instance of an array of Color . Declaration public bool Equals(Color[] other) Parameters Type Name Description Color [] other An array of Color to compare with this object. Returns Type Description System.Boolean true if the other object has the same number of elements, and contain matching colors; otherwise, false . Equals(Custom) Indicates whether the current object is equal to another object of the same type. Declaration public bool Equals(Custom other) Parameters Type Name Description Custom other A Custom to compare with this object. Returns Type Description System.Boolean true if the current object is equal to the other parameter; otherwise, false . Equals(Object) Indicates whether this instance and a specified object are equal. Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Another object to compare to. Returns Type Description System.Boolean true if obj and this instance are of compatible types and represent the same value; otherwise, false . GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description System.Int32 A 32-bit signed integer that is the hash code for this instance. Set(Color) Sets all LED indices to the specified Color . Declaration public void Set(Color color) Parameters Type Name Description Color color The Color to set. Operators Equality(Custom, Object) Compares an instance of Custom with another object for equality. Declaration public static bool operator ==(Custom left, object right) Parameters Type Name Description Custom left The left operand, an instance of Custom . System.Object right The right operand, any type of object. Returns Type Description System.Boolean true if the two objects are equal, otherwise false . Inequality(Custom, Object) Compares an instance of Custom with another object for inequality. Declaration public static bool operator !=(Custom left, object right) Parameters Type Name Description Custom left The left operand, an instance of Custom . System.Object right The right operand, any type of object. Returns Type Description System.Boolean true if the two objects are not equal, otherwise false . Implements System.IEquatable<> System.IEquatable<>"
  },
  "api/Corale.Colore.Effects.ChromaLink.Effect.html": {
    "href": "api/Corale.Colore.Effects.ChromaLink.Effect.html",
    "title": "Class Effect",
    "keywords": "Class Effect Supported built-in Chroma Link effects. Inheritance System.Enum Effect Namespace : Corale.Colore.Effects.ChromaLink Assembly : Corale.Colore.dll Syntax public sealed class Effect : Enum Fields Custom No effect. Declaration public const Effect Custom Field Value Type Description Effect Invalid No effect. Declaration public const Effect Invalid Field Value Type Description Effect None No effect. Declaration public const Effect None Field Value Type Description Effect Static No effect. Declaration public const Effect Static Field Value Type Description Effect value__ Declaration public int value__ Field Value Type Description System.Int32"
  },
  "api/Corale.Colore.Effects.Generic.Effect.html": {
    "href": "api/Corale.Colore.Effects.Generic.Effect.html",
    "title": "Class Effect",
    "keywords": "Class Effect Generic device effects. Inheritance System.Enum Effect Namespace : Corale.Colore.Effects.Generic Assembly : Corale.Colore.dll Syntax public sealed class Effect : Enum Remarks Not all devices are compatible with every effect type. Fields Invalid Invalid effect. Declaration public const Effect Invalid Field Value Type Description Effect None No effect. Declaration public const Effect None Field Value Type Description Effect Reserved Reserved effect. Declaration public const Effect Reserved Field Value Type Description Effect value__ Declaration public int value__ Field Value Type Description System.Int32"
  },
  "api/Corale.Colore.Effects.Generic.None.html": {
    "href": "api/Corale.Colore.Effects.Generic.None.html",
    "title": "Class None",
    "keywords": "Class None Describes the NO_EFFECT effect. Inheritance System.ValueType None Implements System.IEquatable < None > Namespace : Corale.Colore.Effects.Generic Assembly : Corale.Colore.dll Syntax public sealed class None : ValueType, IEquatable<None> Constructors None(Int32) Initializes a new instance of the None struct. Declaration public None(int parameter = 0) Parameters Type Name Description System.Int32 parameter Additional effect parameter to set. Fields Parameter Additional effect parameter. Declaration public readonly int Parameter Field Value Type Description System.Int32 Size The size of the struct. Declaration public readonly int Size Field Value Type Description System.Int32 Methods Equals(None) Indicates whether the current object is equal to another object of the same type. Declaration public bool Equals(None other) Parameters Type Name Description None other An object to compare with this object. Returns Type Description System.Boolean true if the current object is equal to the other parameter; otherwise, false . Equals(Object) Indicates whether this instance and a specified object are equal. Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj The object to compare with the current instance. Returns Type Description System.Boolean true if obj and this instance are the same type and represent the same value; otherwise, false . GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description System.Int32 A 32-bit signed integer that is the hash code for this instance. Operators Equality(None, None) Checks an instance of None for equality with another None instance. Declaration public static bool operator ==(None left, None right) Parameters Type Name Description None left Left operand. None right Right operand. Returns Type Description System.Boolean true if the two instances are equal, otherwise false . Inequality(None, None) Checks an instance of None for inequality with another None instance. Declaration public static bool operator !=(None left, None right) Parameters Type Name Description None left Left operand. None right Right operand. Returns Type Description System.Boolean true if the two instances are not equal, otherwise false . Implements System.IEquatable<>"
  },
  "api/Corale.Colore.Effects.Generic.html": {
    "href": "api/Corale.Colore.Effects.Generic.html",
    "title": "Namespace Corale.Colore.Effects.Generic",
    "keywords": "Namespace Corale.Colore.Effects.Generic Classes Effect Generic device effects. None Describes the NO_EFFECT effect."
  },
  "api/Corale.Colore.Effects.Headset.Custom.html": {
    "href": "api/Corale.Colore.Effects.Headset.Custom.html",
    "title": "Class Custom",
    "keywords": "Class Custom Custom effect for headsets. Inheritance System.ValueType Custom Implements System.IEquatable < Custom > Namespace : Corale.Colore.Effects.Headset Assembly : Corale.Colore.dll Syntax public sealed class Custom : ValueType, IEquatable<Custom> Constructors Custom(Color) Initializes a new instance of the Custom struct with a default color to apply to every LED. Declaration public Custom(Color color) Parameters Type Name Description Color color The color to set every LED to initially. Custom(Custom) Initializes a new instance of the Custom struct with the colors copied from another struct of the same type. Declaration public Custom(Custom other) Parameters Type Name Description Custom other The struct to copy data from. Custom(IList<Color>) Initializes a new instance of the Custom struct. Declaration public Custom(IList<Color> colors) Parameters Type Name Description System.Collections.Generic.IList < Color > colors The colors to use. Exceptions Type Condition System.ArgumentException Thrown if the colors list supplied is of an incorrect size. Properties Item[Int32] Gets or sets LEDs in the custom array. Declaration public Color this[int led] { get; set; } Parameters Type Name Description System.Int32 led Index of the LED to access. Property Value Type Description Color The Color at the specified position. Exceptions Type Condition System.ArgumentOutOfRangeException Thrown if the specified LED index is outside the range of available LED indices. Methods Clear() Clears the colors in this Custom struct (sets to Black ). Declaration public void Clear() Clone() Returns a copy of this struct. Declaration public Custom Clone() Returns Type Description Custom A copy of this struct. Create() Create a new empty Custom struct. Declaration public static Custom Create() Returns Type Description Custom An instance of Custom filled with the color black. Equals(Custom) Indicates whether the current object is equal to another object of the same type. Declaration public bool Equals(Custom other) Parameters Type Name Description Custom other An object to compare with this object. Returns Type Description System.Boolean true if the current object is equal to the other parameter; otherwise, false . Equals(Object) Indicates whether this instance and a specified object are equal. Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Another object to compare to. Returns Type Description System.Boolean true if obj and this instance are the same type and represent the same value; otherwise, false . GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description System.Int32 A 32-bit signed integer that is the hash code for this instance. Set(Color) Sets all the LED indices to the specified Color . Declaration public void Set(Color color) Parameters Type Name Description Color color The Color to set the LEDs to. Operators Equality(Custom, Object) Compares an instance of Custom with another object for equality. Declaration public static bool operator ==(Custom left, object right) Parameters Type Name Description Custom left The left operand, an instance of Custom . System.Object right The right operand, any type of object. Returns Type Description System.Boolean true if the two objects are equal, otherwise false . Inequality(Custom, Object) Compares an instance of Custom with another object for inequality. Declaration public static bool operator !=(Custom left, object right) Parameters Type Name Description Custom left The left operand, an instance of Custom . System.Object right The right operand, any type of object. Returns Type Description System.Boolean true if the two objects are not equal, otherwise false . Implements System.IEquatable<>"
  },
  "api/Corale.Colore.Effects.Headset.Static.html": {
    "href": "api/Corale.Colore.Effects.Headset.Static.html",
    "title": "Class Static",
    "keywords": "Class Static Static color effect. Inheritance System.ValueType Static Implements System.IEquatable < Static > Namespace : Corale.Colore.Effects.Headset Assembly : Corale.Colore.dll Syntax public sealed class Static : ValueType, IEquatable<Static> Constructors Static(Color) Initializes a new instance of the Static struct. Declaration public Static(Color color) Parameters Type Name Description Color color The Color to set. Fields Color The Color of the effect. Declaration public readonly Color Color Field Value Type Description Color Methods Equals(Static) Indicates whether the current object is equal to another object of the same type. Declaration public bool Equals(Static other) Parameters Type Name Description Static other An object to compare with this object. Returns Type Description System.Boolean true if the current object is equal to the other parameter; otherwise, false . Equals(Object) Indicates whether this instance and a specified object are equal. Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj The object to compare with the current instance. Returns Type Description System.Boolean true if obj and this instance are the same type and represent the same value; otherwise, false . GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description System.Int32 A 32-bit signed integer that is the hash code for this instance. Operators Equality(Static, Static) Checks an instance of Static for equality with another Static instance. Declaration public static bool operator ==(Static left, Static right) Parameters Type Name Description Static left Left operand. Static right Right operand. Returns Type Description System.Boolean true if the two instances are equal, otherwise false . Inequality(Static, Static) Checks an instance of Static for inequality with another Static instance. Declaration public static bool operator !=(Static left, Static right) Parameters Type Name Description Static left Left operand. Static right Right operand. Returns Type Description System.Boolean true if the two instances are not equal, otherwise false . Implements System.IEquatable<>"
  },
  "api/Corale.Colore.Effects.Headset.html": {
    "href": "api/Corale.Colore.Effects.Headset.html",
    "title": "Namespace Corale.Colore.Effects.Headset",
    "keywords": "Namespace Corale.Colore.Effects.Headset Classes Custom Custom effect for headsets. Effect Standard effects for headsets. HeadsetConstants Contains various headset constants used in Razer's API. Static Static color effect."
  },
  "api/Corale.Colore.Effects.Keyboard.Effect.html": {
    "href": "api/Corale.Colore.Effects.Keyboard.Effect.html",
    "title": "Class Effect",
    "keywords": "Class Effect Supported built-in keyboard effects. Inheritance System.Enum Effect Namespace : Corale.Colore.Effects.Keyboard Assembly : Corale.Colore.dll Syntax public sealed class Effect : Enum Fields Custom Custom effect. Declaration public const Effect Custom Field Value Type Description Effect CustomKey Custom effect with keys. Declaration public const Effect CustomKey Field Value Type Description Effect Invalid Invalid effect. Declaration public const Effect Invalid Field Value Type Description Effect None No effect. Declaration public const Effect None Field Value Type Description Effect Reserved Reserved effect. Declaration public const Effect Reserved Field Value Type Description Effect Static Static effect. Declaration public const Effect Static Field Value Type Description Effect value__ Declaration public int value__ Field Value Type Description System.Int32"
  },
  "api/Corale.Colore.Effects.Keyboard.Key.html": {
    "href": "api/Corale.Colore.Effects.Keyboard.Key.html",
    "title": "Class Key",
    "keywords": "Class Key Definition of all keys available on the keyboard. Inheritance System.Enum Key Namespace : Corale.Colore.Effects.Keyboard Assembly : Corale.Colore.dll Syntax public sealed class Key : Enum Fields A A key. Declaration public const Key A Field Value Type Description Key B B key. Declaration public const Key B Field Value Type Description Key Backspace Backspace key. Declaration public const Key Backspace Field Value Type Description Key C C key. Declaration public const Key C Field Value Type Description Key CapsLock Caps Lock. Declaration public const Key CapsLock Field Value Type Description Key D D key. Declaration public const Key D Field Value Type Description Key D0 0 key. Declaration public const Key D0 Field Value Type Description Key D1 1 key. Declaration public const Key D1 Field Value Type Description Key D2 2 key. Declaration public const Key D2 Field Value Type Description Key D3 3 key. Declaration public const Key D3 Field Value Type Description Key D4 4 key. Declaration public const Key D4 Field Value Type Description Key D5 5 key. Declaration public const Key D5 Field Value Type Description Key D6 6 key. Declaration public const Key D6 Field Value Type Description Key D7 7 key. Declaration public const Key D7 Field Value Type Description Key D8 8 key. Declaration public const Key D8 Field Value Type Description Key D9 9 key. Declaration public const Key D9 Field Value Type Description Key Delete Delete key. Declaration public const Key Delete Field Value Type Description Key Down Down key. Declaration public const Key Down Field Value Type Description Key E E key. Declaration public const Key E Field Value Type Description Key End End key. Declaration public const Key End Field Value Type Description Key Enter Enter key. Declaration public const Key Enter Field Value Type Description Key Remarks Unsafe key. Escape Esc key. Declaration public const Key Escape Field Value Type Description Key EurBackslash Backslash () key. Declaration public const Key EurBackslash Field Value Type Description Key Remarks Unsafe key. EurPound Pound sign (#) key. Declaration public const Key EurPound Field Value Type Description Key Remarks Unsafe key. F F key. Declaration public const Key F Field Value Type Description Key F1 F1 key. Declaration public const Key F1 Field Value Type Description Key F10 F10 key. Declaration public const Key F10 Field Value Type Description Key F11 F11 key. Declaration public const Key F11 Field Value Type Description Key F12 F12 key. Declaration public const Key F12 Field Value Type Description Key F2 F2 key. Declaration public const Key F2 Field Value Type Description Key F3 F3 key. Declaration public const Key F3 Field Value Type Description Key F4 F4 key. Declaration public const Key F4 Field Value Type Description Key F5 F5 key. Declaration public const Key F5 Field Value Type Description Key F6 F6 key. Declaration public const Key F6 Field Value Type Description Key F7 F7 key. Declaration public const Key F7 Field Value Type Description Key F8 F8 key. Declaration public const Key F8 Field Value Type Description Key F9 F9 key. Declaration public const Key F9 Field Value Type Description Key Function \"Fn\" function key. Declaration public const Key Function Field Value Type Description Key G G key. Declaration public const Key G Field Value Type Description Key H H key. Declaration public const Key H Field Value Type Description Key Home Home key. Declaration public const Key Home Field Value Type Description Key I I key. Declaration public const Key I Field Value Type Description Key Insert Insert key. Declaration public const Key Insert Field Value Type Description Key Invalid Invalid key. Declaration public const Key Invalid Field Value Type Description Key J J key. Declaration public const Key J Field Value Type Description Key Jpn3 無変換 key. Declaration public const Key Jpn3 Field Value Type Description Key Remarks Unsafe key. Jpn4 変換 key. Declaration public const Key Jpn4 Field Value Type Description Key Remarks Unsafe key. Jpn5 ひらがな/カタカナ key. Declaration public const Key Jpn5 Field Value Type Description Key Remarks Unsafe key. JpnSlash Forward slash (/) key. Declaration public const Key JpnSlash Field Value Type Description Key Remarks Unsafe key. JpnYen Yen (¥) key. Declaration public const Key JpnYen Field Value Type Description Key Remarks Unsafe key. K K key. Declaration public const Key K Field Value Type Description Key Kor2 Unknown Korean key. Declaration public const Key Kor2 Field Value Type Description Key Kor3 Unknown Korean key. Declaration public const Key Kor3 Field Value Type Description Key Kor4 Unknown Korean key. Declaration public const Key Kor4 Field Value Type Description Key Kor5 한자 key. Declaration public const Key Kor5 Field Value Type Description Key Kor6 한/영 key. Declaration public const Key Kor6 Field Value Type Description Key Kor7 Unknown Korean key. Declaration public const Key Kor7 Field Value Type Description Key KorPipe Pipe character (|) key. Declaration public const Key KorPipe Field Value Type Description Key L L key. Declaration public const Key L Field Value Type Description Key Left Left key. Declaration public const Key Left Field Value Type Description Key LeftAlt Left alt key. Declaration public const Key LeftAlt Field Value Type Description Key LeftControl Left control key. Declaration public const Key LeftControl Field Value Type Description Key LeftShift Left shift key. Declaration public const Key LeftShift Field Value Type Description Key Remarks Unsafe key. LeftWindows Left windows key. Declaration public const Key LeftWindows Field Value Type Description Key Logo The Razer logo on the keyboard. Declaration public const Key Logo Field Value Type Description Key M M key. Declaration public const Key M Field Value Type Description Key Macro1 Macro key 1. Declaration public const Key Macro1 Field Value Type Description Key Macro2 Macro key 2. Declaration public const Key Macro2 Field Value Type Description Key Macro3 Macro key 3. Declaration public const Key Macro3 Field Value Type Description Key Macro4 Macro key 4. Declaration public const Key Macro4 Field Value Type Description Key Macro5 Macro Key 5. Declaration public const Key Macro5 Field Value Type Description Key N N key. Declaration public const Key N Field Value Type Description Key Num0 Numpad 0. Declaration public const Key Num0 Field Value Type Description Key Num1 Numpad 1. Declaration public const Key Num1 Field Value Type Description Key Num2 Numpad 2. Declaration public const Key Num2 Field Value Type Description Key Num3 Numpad 3. Declaration public const Key Num3 Field Value Type Description Key Num4 Numpad 4. Declaration public const Key Num4 Field Value Type Description Key Num5 Numpad 5. Declaration public const Key Num5 Field Value Type Description Key Num6 Numpad 6. Declaration public const Key Num6 Field Value Type Description Key Num7 Numpad 7. Declaration public const Key Num7 Field Value Type Description Key Num8 Numpad 8. Declaration public const Key Num8 Field Value Type Description Key Num9 Numpad 9. Declaration public const Key Num9 Field Value Type Description Key NumAdd Add key. Declaration public const Key NumAdd Field Value Type Description Key NumDecimal Decimal key. Declaration public const Key NumDecimal Field Value Type Description Key NumDivide Divide key. Declaration public const Key NumDivide Field Value Type Description Key NumEnter Enter key. Declaration public const Key NumEnter Field Value Type Description Key NumLock Numlock key. Declaration public const Key NumLock Field Value Type Description Key NumMultiply Multiply key. Declaration public const Key NumMultiply Field Value Type Description Key NumSubtract Subtract key. Declaration public const Key NumSubtract Field Value Type Description Key O O key. Declaration public const Key O Field Value Type Description Key OemApostrophe Apostrophe (') key. Declaration public const Key OemApostrophe Field Value Type Description Key OemBackslash Backslash () key. Declaration public const Key OemBackslash Field Value Type Description Key Remarks Unsafe key. OemComma Comma (,) key. Declaration public const Key OemComma Field Value Type Description Key OemEquals Equal sign (=) key. Declaration public const Key OemEquals Field Value Type Description Key OemLeftBracket Left square bracket ([) key. Declaration public const Key OemLeftBracket Field Value Type Description Key OemMinus Minus (-) key. Declaration public const Key OemMinus Field Value Type Description Key OemPeriod Period/full stop (.) key. Declaration public const Key OemPeriod Field Value Type Description Key OemRightBracket Right square bracket (]) key. Declaration public const Key OemRightBracket Field Value Type Description Key OemSemicolon Semi-colon (;) key. Declaration public const Key OemSemicolon Field Value Type Description Key OemSlash Forwards slash (/) key. Declaration public const Key OemSlash Field Value Type Description Key OemTilde Tilde (~) key. 半角/全角. Declaration public const Key OemTilde Field Value Type Description Key P P key. Declaration public const Key P Field Value Type Description Key PageDown Page Down key. Declaration public const Key PageDown Field Value Type Description Key PageUp Page Up. Declaration public const Key PageUp Field Value Type Description Key Pause Pause key. Declaration public const Key Pause Field Value Type Description Key PrintScreen Print Screen. Declaration public const Key PrintScreen Field Value Type Description Key Q Q key. Declaration public const Key Q Field Value Type Description Key R R key. Declaration public const Key R Field Value Type Description Key Right Right key. Declaration public const Key Right Field Value Type Description Key RightAlt Right alt key. Declaration public const Key RightAlt Field Value Type Description Key RightControl Right control key. Declaration public const Key RightControl Field Value Type Description Key RightMenu Right menu key. Declaration public const Key RightMenu Field Value Type Description Key RightShift Right shift key. Declaration public const Key RightShift Field Value Type Description Key Remarks Unsafe key. S S key. Declaration public const Key S Field Value Type Description Key Scroll Scroll Lock. Declaration public const Key Scroll Field Value Type Description Key Space Spacebar key. Declaration public const Key Space Field Value Type Description Key T T key. Declaration public const Key T Field Value Type Description Key Tab Tab key. Declaration public const Key Tab Field Value Type Description Key U U key. Declaration public const Key U Field Value Type Description Key Up Up key. Declaration public const Key Up Field Value Type Description Key V V key. Declaration public const Key V Field Value Type Description Key value__ Declaration public int value__ Field Value Type Description System.Int32 W W key. Declaration public const Key W Field Value Type Description Key X X key. Declaration public const Key X Field Value Type Description Key Y Y key. Declaration public const Key Y Field Value Type Description Key Z Z key. Declaration public const Key Z Field Value Type Description Key"
  },
  "api/Corale.Colore.Effects.Keypad.Effect.html": {
    "href": "api/Corale.Colore.Effects.Keypad.Effect.html",
    "title": "Class Effect",
    "keywords": "Class Effect Supported effects for Chroma keypads. Inheritance System.Enum Effect Namespace : Corale.Colore.Effects.Keypad Assembly : Corale.Colore.dll Syntax public sealed class Effect : Enum Fields Custom Custom effect. Declaration public const Effect Custom Field Value Type Description Effect Invalid Invalid effect. Declaration public const Effect Invalid Field Value Type Description Effect None No effect. Declaration public const Effect None Field Value Type Description Effect Static Static color. Declaration public const Effect Static Field Value Type Description Effect value__ Declaration public int value__ Field Value Type Description System.Int32"
  },
  "api/Corale.Colore.Effects.Keypad.KeypadConstants.html": {
    "href": "api/Corale.Colore.Effects.Keypad.KeypadConstants.html",
    "title": "Class KeypadConstants",
    "keywords": "Class KeypadConstants Keypad constants. Inheritance System.Object KeypadConstants Namespace : Corale.Colore.Effects.Keypad Assembly : Corale.Colore.dll Syntax public static class KeypadConstants : Object Fields MaxColumns Maximum number of columns. Declaration public const int MaxColumns = 5 Field Value Type Description System.Int32 MaxKeys Total number of keys. Declaration public const int MaxKeys = 20 Field Value Type Description System.Int32 MaxRows Maximum number of rows. Declaration public const int MaxRows = 4 Field Value Type Description System.Int32"
  },
  "api/Corale.Colore.Effects.Mouse.Custom.html": {
    "href": "api/Corale.Colore.Effects.Mouse.Custom.html",
    "title": "Class Custom",
    "keywords": "Class Custom Custom grid effect for mouse LEDs. Inheritance System.ValueType Custom Implements System.IEquatable < Custom > System.IEquatable < Color [][]> System.IEquatable < Color []> Namespace : Corale.Colore.Effects.Mouse Assembly : Corale.Colore.dll Syntax public sealed class Custom : ValueType, IEquatable<Custom>, IEquatable<Color[][]>, IEquatable<Color[]> Constructors Custom(Color) Initializes a new instance of the Custom struct with every position set to a specific color. Declaration public Custom(Color color) Parameters Type Name Description Color color The Color to set each position to. Custom(Color[][]) Initializes a new instance of the Custom struct. Declaration public Custom(Color[][] colors) Parameters Type Name Description Color [][] colors The colors to use. Exceptions Type Condition System.ArgumentException Thrown if the colors array supplied is of an incorrect size. Custom(Custom) Initializes a new instance of the Custom struct with the colors copied from another struct of the same type. Declaration public Custom(Custom other) Parameters Type Name Description Custom other The Custom struct to copy data from. Custom(IList<Color>) Initializes a new instance of the Custom struct. Declaration public Custom(IList<Color> colors) Parameters Type Name Description System.Collections.Generic.IList < Color > colors The colors to use. Exceptions Type Condition System.ArgumentException Thrown if the colors array supplied is of an invalid size. Properties Item[GridLed] Gets or sets the color for a specific LED in the Custom . Declaration public Color this[GridLed led] { get; set; } Parameters Type Name Description GridLed led The GridLed to access. Property Value Type Description Color The Color for the specified led. Item[Int32] Gets or sets a position in the custom grid. Declaration public Color this[int index] { get; set; } Parameters Type Name Description System.Int32 index The index to access, zero indexed. Property Value Type Description Color Exceptions Type Condition System.ArgumentOutOfRangeException Thrown if the requested index is out of range. Item[Int32, Int32] Gets or sets cells in the Custom . Declaration public Color this[int row, int column] { get; set; } Parameters Type Name Description System.Int32 row Row to access, zero indexed. System.Int32 column Column to access, zero indexed. Property Value Type Description Color The Color at the specified position. Methods Clear() Clears the colors from the grid, setting them to Black . Declaration public void Clear() Clone() Returns a copy of this struct. Declaration public Custom Clone() Returns Type Description Custom A copy of this struct. Create() Creates a new empty Custom struct. Declaration public static Custom Create() Returns Type Description Custom An instance of Custom filled with the color black. Equals(Color[]) Indicates whether the current object is equal to an instance of an array of Color . Declaration public bool Equals(Color[] other) Parameters Type Name Description Color [] other An array of Color to compare with this object. Returns Type Description System.Boolean true if the other object has the same number of elements, and contain matching colors; otherwise, false . Equals(Color[][]) Indicates whether the current object is equal to an instance of a 2-dimensional array of Color . Declaration public bool Equals(Color[][] other) Parameters Type Name Description Color [][] other A 2-dimensional array of Color to compare with this object. Returns Type Description System.Boolean true if the other object has the same number of rows and columns, and contain matching colors; otherwise, false . Equals(Custom) Indicates whether the current object is equal to another object of the same type. Declaration public bool Equals(Custom other) Parameters Type Name Description Custom other A Custom to compare with this object. Returns Type Description System.Boolean true if the current object is equal to the other parameter; otherwise, false . Equals(Object) Indicates whether this instance and a specified object are equal. Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Another object to compare to. Returns Type Description System.Boolean true if obj and this instance are of compatible types and represent the same value; otherwise, false . GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description System.Int32 A 32-bit signed integer that is the hash code for this instance. Set(Color) Sets the entire grid to a specific Color . Declaration public void Set(Color color) Parameters Type Name Description Color color The Color to apply. Operators Equality(Custom, Object) Compares an instance of Custom with another object for equality. Declaration public static bool operator ==(Custom left, object right) Parameters Type Name Description Custom left The left operand, an instance of Custom . System.Object right The right operand, any type of object. Returns Type Description System.Boolean true if the two objects are equal, otherwise false . Inequality(Custom, Object) Compares an instance of Custom with another object for inequality. Declaration public static bool operator !=(Custom left, object right) Parameters Type Name Description Custom left The left operand, an instance of Custom . System.Object right The right operand, any type of object. Returns Type Description System.Boolean true if the two objects are not equal, otherwise false . Implements System.IEquatable<> System.IEquatable<> System.IEquatable<>"
  },
  "api/Corale.Colore.Effects.Mouse.Effect.html": {
    "href": "api/Corale.Colore.Effects.Mouse.Effect.html",
    "title": "Class Effect",
    "keywords": "Class Effect Supported built-in mouse effects. Inheritance System.Enum Effect Namespace : Corale.Colore.Effects.Mouse Assembly : Corale.Colore.dll Syntax public sealed class Effect : Enum Fields Custom Custom grid effect. Declaration public const Effect Custom Field Value Type Description Effect Invalid Invalid effect. Declaration public const Effect Invalid Field Value Type Description Effect None No effect. Declaration public const Effect None Field Value Type Description Effect Static Static color effect. Declaration public const Effect Static Field Value Type Description Effect value__ Declaration public int value__ Field Value Type Description System.Int32"
  },
  "api/Corale.Colore.Effects.Mouse.MouseConstants.html": {
    "href": "api/Corale.Colore.Effects.Mouse.MouseConstants.html",
    "title": "Class MouseConstants",
    "keywords": "Class MouseConstants Mouse constants. Inheritance System.Object MouseConstants Namespace : Corale.Colore.Effects.Mouse Assembly : Corale.Colore.dll Syntax public static class MouseConstants : Object Fields MaxColumns Maximum number of LED columns. Declaration public const int MaxColumns = 7 Field Value Type Description System.Int32 MaxLeds Maximum number of LEDs on the grid layout. Declaration public const int MaxLeds = 63 Field Value Type Description System.Int32 MaxRows Maximum number of LED rows. Declaration public const int MaxRows = 9 Field Value Type Description System.Int32"
  },
  "api/Corale.Colore.Effects.Mouse.Static.html": {
    "href": "api/Corale.Colore.Effects.Mouse.Static.html",
    "title": "Class Static",
    "keywords": "Class Static Describes the static effect type. Inheritance System.ValueType Static Implements System.IEquatable < Static > Namespace : Corale.Colore.Effects.Mouse Assembly : Corale.Colore.dll Syntax public sealed class Static : ValueType, IEquatable<Static> Constructors Static(Led, Color) Initializes a new instance of the Static struct. Declaration public Static(Led led, Color color) Parameters Type Name Description Led led The Led on which to apply the color. Color color The Color to set. Fields Color The color to apply. Declaration public readonly Color Color Field Value Type Description Color Led The LED on which to apply the color. Declaration public readonly Led Led Field Value Type Description Led Methods Equals(Static) Indicates whether the current object is equal to another object of the same type. Declaration public bool Equals(Static other) Parameters Type Name Description Static other An object to compare with this object. Returns Type Description System.Boolean true if the current object is equal to the other parameter; otherwise, false . Equals(Object) Indicates whether this instance and a specified object are equal. Declaration public override bool Equals(object other) Parameters Type Name Description System.Object other The object to compare with the current instance. Returns Type Description System.Boolean true if other and this instance are the same type and represent the same value; otherwise, false . GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description System.Int32 A 32-bit signed integer that is the hash code for this instance. Operators Equality(Static, Static) Compares an instance of Static for equality with another Static struct. Declaration public static bool operator ==(Static left, Static right) Parameters Type Name Description Static left Left operand. Static right Right operand. Returns Type Description System.Boolean true if the two instances are equal, otherwise false . Inequality(Static, Static) Compares an instance of Static for inequality with another Static struct. Declaration public static bool operator !=(Static left, Static right) Parameters Type Name Description Static left Left operand. Static right Right operand. Returns Type Description System.Boolean true if the two instances are not equal, otherwise false . Implements System.IEquatable<>"
  },
  "index.html": {
    "href": "index.html",
    "title": "This is the HOMEPAGE.",
    "keywords": "This is the HOMEPAGE . Refer to Markdown for how to write markdown files. Quick Start Notes: Add images to the images folder if the file is referencing an image."
  },
  "articles/getting-started.html": {
    "href": "articles/getting-started.html",
    "title": "Getting Started",
    "keywords": "Getting Started 1. How to install Colore The easiest way to include Colore into your project is to rightclick on your C# Project in the Visual Studio Solution Explorer and Choose \"Manage NuGet Packages...\" From there you can search online for Packages. The NuGet Package manager sadly looks way different depending on the Version of Visual Studio but it should be easy to find Colore. Just search for \"Colore\" and install it. After that you should see a Reference being added to \"Corale.Colore\". 2. How to make every Device the same Color Now in your Form you can just add a button for example and with a doubleclick it will take you to the Forms Sourcecode and already created an Event for that button when it is clicked. At the top of that file you should now include a using Corale.Colore.Core; otherwise you need to prefix everything with Corale.Colore.Core. I myself like to also add the following to the using statements to make sure I have the correct \"Color\". Otherwise it might interfere with System.Drawing: using ColoreColor = Corale.Colore.Core.Color; Now you change the Event Method like the following: private void button1_Click(object sender, EventArgs e) { // Sets all Chroma devices to red Chroma.Instance.SetAll(ColoreColor.Red); //without the usings it will look like that: // Corale.Colore.Core.Chroma.Instance.SetAll(Corale.Colore.Core.Color.Red); } If you then run your application and click the button you will see that all your chroma devices turned Red. 3. How to access Device Types Chroma SDK does not allow you to access one single device (as far as I know) but you can access Device Types. For example Keyboards, Mouse, Keypads... To do that with Colore here is an example for the Keyboard: Again this can be done without any using but I think it's easier. So I'd add the following at the top of the file: using Corale.Colore.Razer.Keyboard; In some cases it might be helpful to also map it to another name as we did with the ColoreColor, but for now it's fine. Then change your method like that: private void button1_Click(object sender, EventArgs e) { Chroma.Instance.Keyboard.SetKey(Key.A, ColoreColor.Red); } Now when you run it you will see that the \"A\" Key will glow Red. So it's pretty easy to use Colore :) To set a color on a Mouse for example: Chroma.Instance.Mouse.SetLed(Corale.Colore.Razer.Mouse.Led.Strip1, ColoreColor.Red); The following Devices are available: Chroma.Instance.Mousepad Chroma.Instance.Keypad Chroma.Instance.Headset Chroma.Instance.Keyboard Chroma.Instance.Mouse As a mousepad doesn't contain a SetKey method take a look at point 5. 4. How to define custom Colors You can of course define any color you like when you use \"new ColoreColor(1.0, 1.0, 1.0)\". The numbers are in the order Red, Green and Blue while 1.0 is full color and 0.0 is nothing. Which makes this White (Red Green and Blue glowing at full bright). You can also use color values which range from 0 - 255 (the usual color range) but make sure to use or cast your value to \"byte\" to call the correct constructor. This can cause some trouble if you aren't careful: While this will work as expected as it's using the byte constructor: new ColoreColor(255,125,125) This will NOT work as expected: new ColoreColor(255.0,125.0,125.0) This does work as expected: int i = 255; var color = new ColoreColor((byte)i, (byte)i, (byte)i); Result: Color with R=255, G=255, B=255 While this does NOT work as expected: int i = 255; var color = new ColoreColor(i, i, i); Result: Color with R=1, G=1, B=1 5. How do I know which color is currently set on a Key / What if I don't want to set a Key but a specific row/column? Internally Colore is storing colors in a Grid. This Grid is then send to the Device. Instead of using SetKey you can directly edit that Grid which will also cause an update to the device by doing the following: Chroma.Instance.Keyboard[Key.A] = ColoreColor.Red; This is the equivalent to SetKey above. But you can also read the value from this Grid with this method. For example: private void button1_Click(object sender, EventArgs e) { // Check if A currently is Red if (Chroma.Instance.Keyboard[Key.A] == ColoreColor.Red) { // If it is, then set it to Blue Chroma.Instance.Keyboard[Key.A] = ColoreColor.Blue; } else { // Otherwise set it to Red Chroma.Instance.Keyboard[Key.A] = ColoreColor.Red; } } In some cases you can even access a virtual Grid instead of for example Key.A you can set the Key in the second row from the top and the fifth column from the left to Red: Chroma.Instance.Keyboard[1, 4] = ColoreColor.Red; The first int is row and the second is column. Starting with 0! There even are Constants that allow you to loop through all Keys: private void button1_Click(object sender, EventArgs e) { // Create a Random Generator Random random = new Random(); // Loop through all Rows for (uint r = 0; r < Constants.MaxRows; r++) { //Loop through all Columns for (uint c = 0; c < Constants.MaxColumns; c++) { // Set the current row and column to the random color Chroma.Instance.Keyboard[r, c] = new ColoreColor(random.Next(256), random.Next(256), random.Next(256)); } } } The same thing can be archived with \"SetPosition\": Chroma.Instance.Keyboard.SetPosition(1, 4, ColoreColor.Red); It depends on the device if it's available or not. 6. What about performance? Now it gets a bit more advanced and some people might think it's not actually needed as the SDK is very fast. But I personally love to manage my grids myself. The following example works for every device and if you do an application which does many updates at once I'd recommend it as you can at first set everything before sending it to the Keyboard, Mouse, Mousepad... . As said in point 5 Colore does internally also store a Grid, but everytime you change a Key via SetKey or the index (Keyboard[Key.A]) it sends an update to the Keyboard. That means if you set multiple Keys at once (maybe even update the whole Keyboard) it does many many many requests to the SDK. Better way in my opinion is to set everything in the grid and then update it. That's what the following code does. As all Customs for the different types are called \"Custom\" it's easier to map them via a using at the top: using MousepadCustom = Corale.Colore.Razer.Mousepad.Effects.Custom; Now the code in your method: private void button1_Click(object sender, EventArgs e) { // Create the custom Grid var customGrid = MousepadCustom.Create(); // Set LED 0 (top right) and LED 14 (top left) to red customGrid[0] = ColoreColor.Red; customGrid[14] = ColoreColor.Red; // Apply the Grid to the Keyboard Chroma.Instance.Mousepad.SetCustom(customGrid); } The using helps if you now want to also use a Keyboard Custom for example: using KeyboardCustom = Corale.Colore.Razer.Keyboard.Effects.Custom; private void button1_Click(object sender, EventArgs e) { // Create the custom Grid var customGrid = MousepadCustom.Create(); // Set LED 0 (top right) and LED 14 (top left) to red customGrid[0] = ColoreColor.Red; customGrid[14] = ColoreColor.Red; // Apply the Grid to the Keyboard Chroma.Instance.Mousepad.SetCustom(customGrid); // Create a custom for the Keyboard var keyboardGrid = KeyboardCustom.Create(); // Set the whole Grid to Green keyboardGrid.Set(ColoreColor.Green); // Set the A Key to Red keyboardGrid[Key.A] = ColoreColor.Red; // Set the Key in the second row and the fifth column to Red keyboardGrid[1,4] = ColoreColor.Red; // Apply the grid to the Keyboard Chroma.Instance.Keyboard.SetCustom(keyboardGrid); } So the random Colors from before will look like the following making instead of many requests to the SDK just one per button click: // Create a Random Generator Random random = new Random(); // Create the custom Grid var keyboardGrid = KeyboardCustom.Create(); // Loop through all Rows for (var r = 0; r < Constants.MaxRows; r++) { //Loop through all Columns for (var c = 0; c < Constants.MaxColumns; c++) { // Set the current row and column to the random color keyboardGrid[r, c] = new ColoreColor(random.Next(256), random.Next(256), random.Next(256)); } } Chroma.Instance.Keyboard.SetCustom(keyboardGrid);"
  },
  "CONTRIBUTING.html": {
    "href": "CONTRIBUTING.html",
    "title": "Contributing",
    "keywords": "Contributing We deeply appreciate anyone wanting to contribute to Colore! In order to make the code neat, readable, and organized properly, there are some guidelines and rules you must follow. Always remember, if you are unsure about something: check the existing source to get an idea of how things should look! If you have more specific questions about the guidelines or other things about the project, feel free to contact anyone listed under PRIMARY AUTHORS in the AUTHORS file or create an issue in the main repo . You can also join the Gitter chat and ask your questions. Cloning the repo First off, fork the repository and clone it to your local development system: git clone git@github.com:<your-username>/Colore.git General design guidelines Design your code to be event-driven when possible, it makes it easier for applications to implement the library. Follow common C# practices for cleaner looking code (properties instead of Get<Name> methods, for example). Development environment 2017-11-05: With Colore now being written using C# 7.0 and .NET Core features, you will need to use an edition of Visual Studio 2017 to develop on Colore. Installing the latest .NET Core SDK can also help as VS2017 currently does not download the latest version in its installer. Code analyzers Updated 2015-12-22: Colore is now on C# 6.0 which meant a move from the old StyleCop package to the new StyleCop.Analyzers package which implements StyleCop rules as Roslyn analyzers. Colore references the StyleCop.Analyzers and various other code analyzer packages, which will analyze the code and point out any errors. A global ruleset file Corale.Colore.ruleset provided with Colore defines the rules we use for Colore and will be used by analyzing tools automatically. If there are any conflicts between this guide and what analyzers tell you, generally follow what the analyzer says . This guide may not always be up to date with the latest changes to what rules we are using. If you feel unsure, feel free to create an issue or contact the primary developers or post a question in the Gitter chat room. Some analyzers can be very strict, or in some cases wrong about pieces of code. If you feel like there's a warning that should be suppressed for a section of code or even globally, feel free to do so but always mention this and your reasoning for doing so in your PR . We will discuss the suppression further in the PR. ReSharper ReSharper is used by the primary developers of Colore and as such, we provide a setting file with Colore that configures ReSharper with the settings we recommend using (such as naming conventions). If you use ReSharper, make sure that the team-shared settings are being used. Mandatory file header The following file header must be present in every code file , if it is missing your code will not be accepted until the header has been put in place. Invalid or missing file headers are detected by the StyleCop analyzers and can be remedied by utilizing the provided quick fix from within the editor. // --------------------------------------------------------------------------------------- // <copyright file=\"{NAME OF FILE WITH EXTENSION}\" company=\"Corale\"> // Copyright © 2015-2017 by Adam Hellberg and Brandon Scott. // // Permission is hereby granted, free of charge, to any person obtaining a copy of // this software and associated documentation files (the \"Software\"), to deal in // the Software without restriction, including without limitation the rights to // use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies // of the Software, and to permit persons to whom the Software is furnished to do // so, subject to the following conditions: // // The above copyright notice and this permission notice shall be included in all // copies or substantial portions of the Software. // // THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, // WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN // CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. // // \"Razer\" is a trademark of Razer USA Ltd. // </copyright> // --------------------------------------------------------------------------------------- Indenting Use 4 spaces for indenting ( not tabs! ). No more, no less. Every decent IDE (and even text editor) lets you change this. Code with incorrect indentation will not be accepted until corrected. Using declarations StyleCop will notify you about incorrect using statements. Put using statements as deep as possible (usually it will be just after the namespace declaration) and in alphabetical order. System.* namespaces are always put at the top in their own alphabetical order. Example showing correctly sorted using statements using System; using Colore.Core; using SomeAuthor.SomeLib; (Space between using groups is optional, but can often make it easier to read.) Naming StyleCop will tell you how to name things most of the time. The only thing worth mentioning is that private fields are named by prefixing them with an underscore. The only exception is for const and static readonly in which case they are named using PascalCase. // Naming example for a private variable private SomeType _myVar; // Naming example for a private static readonly private static readonly SomeType MyVar; If you are using ReSharper, it will manage this for you, as we are using its default naming scheme. Exceptions to naming convention You should always try to name everything in a C#-idiomatic way, but we may make exceptions for exceptional cases, like when importing native code fragments. Exception throwing and handling Try not to catch the base Exception class, always catch specific exceptions that you are certain your code can handle. When throwing exceptions, throw a type that is relevant to the error that occurred, don't throw a base Exception if an argument is null , throw the ArgumentNullException . If creating custom exception types, append Exception to the name and inherit from the relevant base ColoreException class or one of the other exception classes in Colore, as per usual C# guidelines. Try to keep exception names short but descriptive. Usage of the var keyword With fancy IDEs and other tools, the need to explicitly specify the type of a variable is not as important. If you look through the source, you'll find that the var keyword is used extensively. However, whether or not you use the var keyword doesn't matter too much. If you find a piece of code more readable with the full type name, then write the full type name. Use your own judgement to decide whether using the var keyword makes your code more readable. That said, there are situations where using the var keyword is strongly encouraged, when the type name is mentioned in the statement (typically on assignment operations): // Consider this line of code: SpecialSuperType[] myArray = new SpecialSupertype[10]; // here it would be preferred to use the var keyword, as the type is already mentioned in the assignment var myArray = new SpecialSuperType[10]; Calling native Chroma SDK functions Never call native SDK functions directly . Always call SDK functions via the IChromaApi interface that is provided to all device classes as well as the main Chroma class. When implementing a new SDK function, add a fitting method in the IChromaApi interface and then implement the method in each SDK implementation wrapper (native and REST API). Remember to design the method on IChromaApi to be friendly in a C# context. The implementation will take care of making the calls to the underlying SDK, not the user of the API interface. Documenting your code Public-facing components of your code must have documentation. We will not merge pull requests that are missing documentation on public members. Use standard C# XML documentation comments for documenting your code, like so: /// <summary> /// Opens a webpage. /// </summary> /// <param name=\"url\">The URL to open.</param> /// <returns><c>true</c> if the webpage opened, <c>false</c> otherwise.</returns> public bool OpenWebpage(string url) { // Code... } If you are using Visual Studio, it will automatically insert the proper tags for you when you type three slashes where applicable ( /// ). Please use proper grammar and punctuation in your documentation comments for the convenience of the reader. We understand that not everyone is a native English speaker or have perfect language skills, and so we are pretty relaxed with the proper-ness of documentation comments. Simply: Badly written documentation comments are still better than no documentation comments at all. The important thing is that you can write something understandable. We will tell you in the pull request if there's something you can improve before we merge it. If you're referencing/importing/wrapping functions from external sources like the WinAPI or Razer's APIs you can simply copy documentation from the original source (MSDN for example). This usually means you get properly written documentation that is easy (ok, most of the time anyway) to understand. Submitting a pull request Good, we didn't scare you off with all these requirements, and you are on your way to submitting your first pull request! When making a pull request, if is often convenient to make a branch just for that request (so that you can continue working on your main development branch while your pull request is being reviewed). These branches are typically named patch-<counter> but can be anything you desire, like a descriptive name for what the PR is about. If you decide to name branches based on the change, make sure you keep them quite short. Another very positive thing for both you and us, the maintainers, is to avoid pull requests with a lot of commits that don't share anything in common. Imagine if you submit a pull request that implements a car and a pineapple. We decide that we like your car implementation, but that we're not quite ready for fruits yet. But we cannot choose, as you put them both in the same pull request! So always make sure that your pull request is handling one type of feature or change . Other things to keep in mind is to include details about what your feature or change is about in the pull request message. The more information the better! And make sure to give your pull request a relevant name, too. When you submit a pull request, there will be a handy template for you to read through so you don't forget any of the important parts! Pull request target branch When submitting your pull request, make sure you are targeting the develop branch of the main repo. If you target the wrong branch we will close your pull request. Don't feel bad though, just re-create it with the correct target branch! (We have to close it as GitHub does not support changing the target branch on an existing pull request.) Hotfixes Hotfixes are special, and are treated differently than other branches. A hotfix is branched from master and merged back into master and then to develop. If you ever write a hotfix, keep this in mind. Hotfixes branch from master, not develop ."
  },
  "api/Corale.Colore.Effects.Keypad.Static.html": {
    "href": "api/Corale.Colore.Effects.Keypad.Static.html",
    "title": "Class Static",
    "keywords": "Class Static Static color effect. Inheritance System.ValueType Static Implements System.IEquatable < Static > Namespace : Corale.Colore.Effects.Keypad Assembly : Corale.Colore.dll Syntax public sealed class Static : ValueType, IEquatable<Static> Constructors Static(Color) Initializes a new instance of the Static struct. Declaration public Static(Color color) Parameters Type Name Description Color color Color to set. Fields Color Color to use. Declaration public readonly Color Color Field Value Type Description Color Methods Equals(Static) Indicates whether the current object is equal to another object of the same type. Declaration public bool Equals(Static other) Parameters Type Name Description Static other An object to compare with this object. Returns Type Description System.Boolean true if the current object is equal to the other parameter; otherwise, false . Equals(Object) Indicates whether this instance and a specified object are equal. Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj The object to compare with the current instance. Returns Type Description System.Boolean true if obj and this instance are the same type and represent the same value; otherwise, false . GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description System.Int32 A 32-bit signed integer that is the hash code for this instance. Operators Equality(Static, Static) Checks an instance of Static for equality with another Static instance. Declaration public static bool operator ==(Static left, Static right) Parameters Type Name Description Static left Left operand. Static right Right operand. Returns Type Description System.Boolean true if the two instances are equal, otherwise false . Inequality(Static, Static) Checks an instance of Static for inequality with another Static instance. Declaration public static bool operator !=(Static left, Static right) Parameters Type Name Description Static left Left operand. Static right Right operand. Returns Type Description System.Boolean true if the two instances are not equal, otherwise false . Implements System.IEquatable<>"
  },
  "api/Corale.Colore.Effects.Keypad.html": {
    "href": "api/Corale.Colore.Effects.Keypad.html",
    "title": "Namespace Corale.Colore.Effects.Keypad",
    "keywords": "Namespace Corale.Colore.Effects.Keypad Classes Custom Custom effect. Effect Supported effects for Chroma keypads. KeypadConstants Keypad constants. Static Static color effect."
  },
  "api/Corale.Colore.Effects.Mouse.GridLed.html": {
    "href": "api/Corale.Colore.Effects.Mouse.GridLed.html",
    "title": "Class GridLed",
    "keywords": "Class GridLed LED definitions for the virtual grid. Inheritance System.Enum GridLed Namespace : Corale.Colore.Effects.Mouse Assembly : Corale.Colore.dll Syntax public sealed class GridLed : Enum Fields Backlight The mouse backlight. Declaration public const GridLed Backlight Field Value Type Description GridLed Bottom1 First bottom LED. Declaration public const GridLed Bottom1 Field Value Type Description GridLed Bottom2 Second bottom LED. Declaration public const GridLed Bottom2 Field Value Type Description GridLed Bottom3 Third bottom LED. Declaration public const GridLed Bottom3 Field Value Type Description GridLed Bottom4 Fourth bottom LED. Declaration public const GridLed Bottom4 Field Value Type Description GridLed Bottom5 Fifth bottom LED. Declaration public const GridLed Bottom5 Field Value Type Description GridLed LeftSide1 First LED on left side. Declaration public const GridLed LeftSide1 Field Value Type Description GridLed LeftSide2 Second LED on left side. Declaration public const GridLed LeftSide2 Field Value Type Description GridLed LeftSide3 Third LED on left side. Declaration public const GridLed LeftSide3 Field Value Type Description GridLed LeftSide4 Fourth LED on left side. Declaration public const GridLed LeftSide4 Field Value Type Description GridLed LeftSide5 Fifth LED on left side. Declaration public const GridLed LeftSide5 Field Value Type Description GridLed LeftSide6 Sixth LED on left side. Declaration public const GridLed LeftSide6 Field Value Type Description GridLed LeftSide7 Seventh LED on left side. Declaration public const GridLed LeftSide7 Field Value Type Description GridLed Logo The LED illuminating the logo present on the mouse. Declaration public const GridLed Logo Field Value Type Description GridLed RightSide1 First LED on right side. Declaration public const GridLed RightSide1 Field Value Type Description GridLed RightSide2 Second LED on right side. Declaration public const GridLed RightSide2 Field Value Type Description GridLed RightSide3 Third LED on right side. Declaration public const GridLed RightSide3 Field Value Type Description GridLed RightSide4 Fourth LED on right side. Declaration public const GridLed RightSide4 Field Value Type Description GridLed RightSide5 Fifth LED on right side. Declaration public const GridLed RightSide5 Field Value Type Description GridLed RightSide6 Sixth LED on right side. Declaration public const GridLed RightSide6 Field Value Type Description GridLed RightSide7 Seventh LED on right side. Declaration public const GridLed RightSide7 Field Value Type Description GridLed ScrollWheel The LED illuminating the scroll wheel. Declaration public const GridLed ScrollWheel Field Value Type Description GridLed value__ Declaration public int value__ Field Value Type Description System.Int32"
  },
  "api/Corale.Colore.Effects.Mouse.Led.html": {
    "href": "api/Corale.Colore.Effects.Mouse.Led.html",
    "title": "Class Led",
    "keywords": "Class Led LEDs that can be the target of color changes. Inheritance System.Enum Led Namespace : Corale.Colore.Effects.Mouse Assembly : Corale.Colore.dll Syntax public sealed class Led : Enum Fields All All LEDs. Declaration public const Led All Field Value Type Description Led Backlight The mouse backlight. Declaration public const Led Backlight Field Value Type Description Led Logo The LED illuminating the logo present on the mouse. Declaration public const Led Logo Field Value Type Description Led None No LED. Declaration public const Led None Field Value Type Description Led ScrollWheel The LED illuminating the scroll wheel. Declaration public const Led ScrollWheel Field Value Type Description Led Strip1 Side strip LED 1 (Mamba TE). Declaration public const Led Strip1 Field Value Type Description Led Strip10 Side strip LED 10 (Mamba TE). Declaration public const Led Strip10 Field Value Type Description Led Strip11 Side strip LED 11 (Mamba TE). Declaration public const Led Strip11 Field Value Type Description Led Strip12 Side strip LED 12 (Mamba TE). Declaration public const Led Strip12 Field Value Type Description Led Strip13 Side strip LED 13 (Mamba TE). Declaration public const Led Strip13 Field Value Type Description Led Strip14 Side strip LED 14 (Mamba TE). Declaration public const Led Strip14 Field Value Type Description Led Strip2 Side strip LED 2 (Mamba TE). Declaration public const Led Strip2 Field Value Type Description Led Strip3 Side strip LED 3 (Mamba TE). Declaration public const Led Strip3 Field Value Type Description Led Strip4 Side strip LED 4 (Mamba TE). Declaration public const Led Strip4 Field Value Type Description Led Strip5 Side strip LED 5 (Mamba TE). Declaration public const Led Strip5 Field Value Type Description Led Strip6 Side strip LED 6 (Mamba TE). Declaration public const Led Strip6 Field Value Type Description Led Strip7 Side strip LED 7 (Mamba TE). Declaration public const Led Strip7 Field Value Type Description Led Strip8 Side strip LED 8 (Mamba TE). Declaration public const Led Strip8 Field Value Type Description Led Strip9 Side strip LED 9 (Mamba TE). Declaration public const Led Strip9 Field Value Type Description Led value__ Declaration public uint value__ Field Value Type Description System.UInt32"
  },
  "api/Corale.Colore.Effects.Mousepad.Static.html": {
    "href": "api/Corale.Colore.Effects.Mousepad.Static.html",
    "title": "Class Static",
    "keywords": "Class Static Static effect for mouse pad. Inheritance System.ValueType Static Implements System.IEquatable < Static > Namespace : Corale.Colore.Effects.Mousepad Assembly : Corale.Colore.dll Syntax public sealed class Static : ValueType, IEquatable<Static> Constructors Static(Color) Initializes a new instance of the Static struct. Declaration public Static(Color color) Parameters Type Name Description Color color The color to use. Fields Color The color to use. Declaration public readonly Color Color Field Value Type Description Color Methods Equals(Static) Indicates whether the current object is equal to another object of the same type. Declaration public bool Equals(Static other) Parameters Type Name Description Static other An object to compare with this object. Returns Type Description System.Boolean true if the current object is equal to the other parameter; otherwise, false . Equals(Object) Indicates whether this instance and a specified object are equal. Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj The object to compare with the current instance. Returns Type Description System.Boolean true if obj and this instance are the same type and represent the same value; otherwise, false . GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description System.Int32 A 32-bit signed integer that is the hash code for this instance. Operators Equality(Static, Static) Checks an instance of Static for equality with another Static instance. Declaration public static bool operator ==(Static left, Static right) Parameters Type Name Description Static left Left operand. Static right Right operand. Returns Type Description System.Boolean true if the two instances are equal, otherwise false . Inequality(Static, Static) Checks an instance of Static for inequality with another Static instance. Declaration public static bool operator !=(Static left, Static right) Parameters Type Name Description Static left Left operand. Static right Right operand. Returns Type Description System.Boolean true if the two instances are not equal, otherwise false . Implements System.IEquatable<>"
  },
  "api/Corale.Colore.Effects.Mousepad.html": {
    "href": "api/Corale.Colore.Effects.Mousepad.html",
    "title": "Namespace Corale.Colore.Effects.Mousepad",
    "keywords": "Namespace Corale.Colore.Effects.Mousepad Classes Custom Custom effect for mouse pad. Effect Effects supported by Chroma mouse pads. MousepadConstants Mouse pad constants. Static Static effect for mouse pad."
  },
  "api/Corale.Colore.Events.ApplicationStateEventArgs.html": {
    "href": "api/Corale.Colore.Events.ApplicationStateEventArgs.html",
    "title": "Class ApplicationStateEventArgs",
    "keywords": "Class ApplicationStateEventArgs Event arguments for the application state event. Inheritance System.EventArgs ApplicationStateEventArgs Namespace : Corale.Colore.Events Assembly : Corale.Colore.dll Syntax public sealed class ApplicationStateEventArgs : EventArgs Constructors ApplicationStateEventArgs(Boolean) Initializes a new instance of the ApplicationStateEventArgs class. Declaration public ApplicationStateEventArgs(bool enabled) Parameters Type Name Description System.Boolean enabled Value indicating whether the application has been enabled. Properties Enabled Gets a value indicating whether or not the application has been enabled. Declaration public bool Enabled { get; } Property Value Type Description System.Boolean"
  },
  "api/Corale.Colore.Events.DeviceAccessEventArgs.html": {
    "href": "api/Corale.Colore.Events.DeviceAccessEventArgs.html",
    "title": "Class DeviceAccessEventArgs",
    "keywords": "Class DeviceAccessEventArgs Event arguments for the device access event. Inheritance System.EventArgs DeviceAccessEventArgs Namespace : Corale.Colore.Events Assembly : Corale.Colore.dll Syntax public sealed class DeviceAccessEventArgs : EventArgs Constructors DeviceAccessEventArgs(Boolean) Initializes a new instance of the DeviceAccessEventArgs class. Declaration public DeviceAccessEventArgs(bool granted) Parameters Type Name Description System.Boolean granted Value indicating whether device access was granted. Properties Granted Gets a value indicating whether device access has been granted. Declaration public bool Granted { get; } Property Value Type Description System.Boolean"
  },
  "api/Corale.Colore.IDevice.html": {
    "href": "api/Corale.Colore.IDevice.html",
    "title": "Interface IDevice",
    "keywords": "Interface IDevice Interface for functionality common with all devices. Namespace : Corale.Colore Assembly : Corale.Colore.dll Syntax public interface IDevice Properties CurrentEffectId Gets the ID of the currently active effect. Declaration Guid CurrentEffectId { get; } Property Value Type Description System.Guid Methods ClearAsync() Clears the current effect on the device. Declaration Task<Guid> ClearAsync() Returns Type Description System.Threading.Tasks.Task < System.Guid > A System.Guid for the effect that was set. SetAllAsync(Color) Sets the color of all components on this device. Declaration Task<Guid> SetAllAsync(Color color) Parameters Type Name Description Color color Color to set. Returns Type Description System.Threading.Tasks.Task < System.Guid > A System.Guid for the effect that was set. SetEffectAsync(Guid) Updates the device to use the effect pointed to by the specified GUID. Declaration Task<Guid> SetEffectAsync(Guid effectId) Parameters Type Name Description System.Guid effectId GUID to set. Returns Type Description System.Threading.Tasks.Task < System.Guid > A System.Guid for the effect that was set."
  },
  "api/Corale.Colore.IGenericDevice.html": {
    "href": "api/Corale.Colore.IGenericDevice.html",
    "title": "Interface IGenericDevice",
    "keywords": "Interface IGenericDevice Interface for generic devices. Inherited Members IDevice.ClearAsync() IDevice.SetAllAsync(Color) IDevice.SetEffectAsync(Guid) IDevice.CurrentEffectId Namespace : Corale.Colore Assembly : Corale.Colore.dll Syntax public interface IGenericDevice : IDevice Properties DeviceId Gets the System.Guid of this device. Declaration Guid DeviceId { get; } Property Value Type Description System.Guid Methods SetEffectAsync(Effect) Sets a parameter-less effect on this device. Declaration Task<Guid> SetEffectAsync(Effect effect) Parameters Type Name Description Effect effect Effect to set. Returns Type Description System.Threading.Tasks.Task < System.Guid > A System.Guid for the effect that was set. SetEffectAsync<T>(Effect, T) Sets an effect on this device, taking a parameter. Declaration Task<Guid> SetEffectAsync<T>(Effect effect, T data)where T : struct, ValueType Parameters Type Name Description Effect effect Effect to set. T data Effect-specific parameter to use. Returns Type Description System.Threading.Tasks.Task < System.Guid > A System.Guid for the effect that was set. Type Parameters Name Description T The type of effect data to set."
  },
  "api/Corale.Colore.IHeadset.html": {
    "href": "api/Corale.Colore.IHeadset.html",
    "title": "Interface IHeadset",
    "keywords": "Interface IHeadset Interface for headset functionality. Inherited Members IDevice.ClearAsync() IDevice.SetAllAsync(Color) IDevice.SetEffectAsync(Guid) IDevice.CurrentEffectId Namespace : Corale.Colore Assembly : Corale.Colore.dll Syntax public interface IHeadset : IDevice Properties Item[Int32] Gets or sets the color of a specific LED on the headset. Declaration Color this[int index] { get; set; } Parameters Type Name Description System.Int32 index The index to access. Property Value Type Description Color The current Color at the index . Methods SetCustomAsync(Custom) Sets a new Custom effect on the headset. Declaration Task<Guid> SetCustomAsync(Custom effect) Parameters Type Name Description Custom effect An instance of the Custom struct describing the effect. Returns Type Description System.Threading.Tasks.Task < System.Guid > A System.Guid for the effect that was set. SetEffectAsync(Effect) Sets an effect on the headset that doesn't take any parameters, currently only valid for the None effect. Declaration Task<Guid> SetEffectAsync(Effect effect) Parameters Type Name Description Effect effect The type of effect to set. Returns Type Description System.Threading.Tasks.Task < System.Guid > A System.Guid for the effect that was set. SetStaticAsync(Color) Sets a new Static effect on the headset using the specified Color . Declaration Task<Guid> SetStaticAsync(Color color) Parameters Type Name Description Color color Color of the effect. Returns Type Description System.Threading.Tasks.Task < System.Guid > A System.Guid for the effect that was set. SetStaticAsync(Static) Sets a new static effect on the headset. Declaration Task<Guid> SetStaticAsync(Static effect) Parameters Type Name Description Static effect An instance of the Static struct describing the effect. Returns Type Description System.Threading.Tasks.Task < System.Guid > A System.Guid for the effect that was set."
  },
  "api/Corale.Colore.IKeyboard.html": {
    "href": "api/Corale.Colore.IKeyboard.html",
    "title": "Interface IKeyboard",
    "keywords": "Interface IKeyboard Interface for keyboard functionality. Inherited Members IDevice.ClearAsync() IDevice.SetAllAsync(Color) IDevice.SetEffectAsync(Guid) IDevice.CurrentEffectId Namespace : Corale.Colore Assembly : Corale.Colore.dll Syntax public interface IKeyboard : IDevice Properties IsDeathstalkerConnected Gets a value indicating whether a Razer Deathstalker Chroma is connected to the system. Declaration bool IsDeathstalkerConnected { get; } Property Value Type Description System.Boolean Item[Key] Gets or sets the Color for a specific Key on the keyboard. The SDK will translate this appropriately depending on user configuration. Declaration Color this[Key key] { get; set; } Parameters Type Name Description Key key The key to access. Property Value Type Description Color The color currently set for the specified key. Item[Int32] Gets or sets the Color for a specific Deathstalker zone. Declaration Color this[int zoneIndex] { get; set; } Parameters Type Name Description System.Int32 zoneIndex Zone to query, between 0 and MaxDeathstalkerZones (exclusive upper bound). Property Value Type Description Color The color currently set for the specified zone. Item[Int32, Int32] Gets or sets the Color for a specific row and column on the keyboard grid. Declaration Color this[int row, int column] { get; set; } Parameters Type Name Description System.Int32 row Row to query, between 0 and MaxRows (exclusive upper-bound). System.Int32 column Column to query, between 0 and MaxColumns (exclusive upper-bound). Property Value Type Description Color The color currently set on the specified position. Methods IsSet(Key) Returns whether a certain key has had a custom color set. Declaration bool IsSet(Key key) Parameters Type Name Description Key key Key to check. Returns Type Description System.Boolean true if the key has a color set, otherwise false . SetCustomAsync(Custom) Sets a custom grid effect on the keyboard. Declaration Task<Guid> SetCustomAsync(Custom effect) Parameters Type Name Description Custom effect Effect options. Returns Type Description System.Threading.Tasks.Task < System.Guid > A System.Guid for the effect that was set. Remarks This will overwrite the current internal Custom struct in the Corale.Colore.Implementations.KeyboardImplementation class. SetDeathstalkerAsync(DeathstalkerGrid) Sets a Deathstalker grid effect. Declaration Task<Guid> SetDeathstalkerAsync(DeathstalkerGrid effect) Parameters Type Name Description DeathstalkerGrid effect The Deathstalker grid effect to set. Returns Type Description System.Threading.Tasks.Task < System.Guid > A System.Guid for the effect that was set. SetDeathstalkerZoneAsync(Int32, Color, Boolean) Sets the specified Deathstalker zone to a color. Declaration Task<Guid> SetDeathstalkerZoneAsync(int zoneIndex, Color color, bool clear = false) Parameters Type Name Description System.Int32 zoneIndex The index of the Deathstalker zone to set. Color color The color to set. System.Boolean clear Whether to clear all colors before setting the new one. Returns Type Description System.Threading.Tasks.Task < System.Guid > A System.Guid for the effect that was set. SetEffectAsync(Effect) Sets an effect without any parameters. Currently, this only works for the None effect. Declaration Task<Guid> SetEffectAsync(Effect effect) Parameters Type Name Description Effect effect Effect options. Returns Type Description System.Threading.Tasks.Task < System.Guid > A System.Guid for the effect that was set. SetKeyAsync(Key, Color, Boolean) Sets the color of a specific key on the keyboard. Declaration Task<Guid> SetKeyAsync(Key key, Color color, bool clear = false) Parameters Type Name Description Key key Key to modify. Color color Color to set. System.Boolean clear If true , the keyboard will first be cleared before setting the key. Returns Type Description System.Threading.Tasks.Task < System.Guid > A System.Guid for the effect that was set. SetKeysAsync(Color, Key, Key[]) Sets the specified color on a set of keys. Declaration Task<Guid> SetKeysAsync(Color color, Key key, params Key[] keys) Parameters Type Name Description Color color The Color to apply. Key key First key to change. Key [] keys Additional keys that should also have the color applied. Returns Type Description System.Threading.Tasks.Task < System.Guid > A System.Guid for the effect that was set. SetKeysAsync(IEnumerable<Key>, Color, Boolean) Sets a color on a collection of keys. Declaration Task<Guid> SetKeysAsync(IEnumerable<Key> keys, Color color, bool clear = false) Parameters Type Name Description System.Collections.Generic.IEnumerable < Key > keys The keys which should have their color changed. Color color The Color to apply. System.Boolean clear If true , the keyboard will first be cleared before setting the keys. Returns Type Description System.Threading.Tasks.Task < System.Guid > A System.Guid for the effect that was set. SetPositionAsync(Int32, Int32, Color, Boolean) Sets the color on a specific row and column on the keyboard grid. Declaration Task<Guid> SetPositionAsync(int row, int column, Color color, bool clear = false) Parameters Type Name Description System.Int32 row Row to set, between 1 and MaxRows . System.Int32 column Column to set, between 1 and MaxColumns . Color color Color to set. System.Boolean clear Whether or not to clear the existing colors before setting this one. Returns Type Description System.Threading.Tasks.Task < System.Guid > A System.Guid for the effect that was set. SetStaticAsync(Static) Sets a static color on the keyboard. Declaration Task<Guid> SetStaticAsync(Static effect) Parameters Type Name Description Static effect Effect options. Returns Type Description System.Threading.Tasks.Task < System.Guid > A System.Guid for the effect that was set."
  },
  "README.html": {
    "href": "README.html",
    "title": "",
    "keywords": "Master : Develop : A powerful and elegant C# library for Razer Chroma's SDK Getting started If you are a new developer and are looking for a helpful guide on how to get started, head on over to the wiki page which describes getting Colore installed and running some example code. Contributing For discussing, you can join the Gitter chat using the badge above. If you want to join the Slack chat, contact Adam Hellberg ( sharparam@sharparam.com ). Contributors are very welcome! If you got code fixes, please submit a pull request here on GitHub. If you want to join the development team, please contact Sharparam on GitHub. All authors and contributors are listed in the AUTHORS file. Please read the CONTRIBUTING.md file before making a pull request. License Copyright © 2015-2017 by Adam Hellberg and Brandon Scott . This project is licensed under the MIT license, please see the file LICENSE for more information. Razer is a trademark and/or a registered trademark of Razer USA Ltd. All other trademarks are property of their respective owners. Installing Using Colore in your project is simple, all you have to do is install it with NuGet! Install-Package Colore Or using the .NET CLI tools: dotnet add package Colore You can also search for it in Visual Studio by right clicking your project and choosing \"Manage NuGet Packages...\" and install it the GUI way. Extensions The WPF and WinForms extension packages for Colore are not yet available for the new Colore version, but will be on NuGet soon, so stay tuned! Using Obtain a reference to an IChroma instance by calling Corale.Colore.ColoreProvider.CreateNative() . This instance initializes the Chroma SDK so it is important you save this reference for the lifetime of your application! If you need to dispose of it and obtain a new one later, be sure to call the uninitialize method first! Currently there is only support for binding to the native Chroma SDK . Support for the REST API is planned and will be implemented for the 6.0 release. For a more in-depth guide on how to get started, check out our wiki . Dependencies Colore depends on the Razer Chroma SDK ( RzChromaSDK64.dll or RzChromaSDK.dll ). The Razer Chroma SDK is provided by Razer and installed together with the Synapse application . More information can be read on their website . Other dependencies are installed via NuGet and listed in each project file. Building Colore supports building for multiple target frameworks. At the moment, these are .NET Standard 1.3 and .NET Framework 4.5.1. When building the project, DLLs for both frameworks will be generated in the output folders, under the folder names netstandard1.3 and net451 . Use the ones fitting for your application. The below examples compiles Colore in Release mode. .\\build.ps1 -Configuration Release You can also use the \"CI\" build target to generate the same artifacts made available for each release of Colore. .\\build.ps1 -Configuration Release -Target CI You will find the resulting artifact files under the artifacts folder in the root of the repository. Note that the above commands are executed with PowerShell . If you are building on a Linux system or macOS, use the build.sh script in place of build.ps1 (you may have to make it executable first with chmod +x build.sh ). Razer Chroma Workshop Many of the games and apps featured on the Razer Chroma Workshop have used the Colore library. The official Razer Chroma Workshop is your one-stop-shop to get the most out of your Chroma devices. Whether it's smart lighting based on in-game events, standalone apps or stunning profiles created by fans around the world, the Chroma Workshop is where you can explore, download and even share your own creations. Games using Colore The following games (powered by Unity) are using Colore: Projects using Colore Aurora - Unified lighting effects across multiple brands and various games. ( GitHub ) There may be others we are unaware of, so please let us know if there are any others."
  },
  "CODE_OF_CONDUCT.html": {
    "href": "CODE_OF_CONDUCT.html",
    "title": "Contributor Covenant Code of Conduct",
    "keywords": "Contributor Covenant Code of Conduct Our Pledge In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation. Our Standards Examples of behavior that contributes to creating a positive environment include: Using welcoming and inclusive language Being respectful of differing viewpoints and experiences Gracefully accepting constructive criticism Focusing on what is best for the community Showing empathy towards other community members Examples of unacceptable behavior by participants include: The use of sexualized language or imagery and unwelcome sexual attention or advances Trolling, insulting/derogatory comments, and personal or political attacks Public or private harassment Publishing others' private information, such as a physical or electronic address, without explicit permission Other conduct which could reasonably be considered inappropriate in a professional setting Our Responsibilities Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior. Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful. Scope This Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers. Enforcement Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at colore@sharparam.com . The project team will review and investigate all complaints, and will respond in a way that it deems appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately. Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership. Attribution This Code of Conduct is adapted from the Contributor Covenant , version 1.4, available at http://contributor-covenant.org/version/1/4"
  },
  "api/index.html": {
    "href": "api/index.html",
    "title": "PLACEHOLDER",
    "keywords": "PLACEHOLDER TODO: Add .NET projects to the src folder and run docfx to generate REAL API Documentation !"
  },
  "articles/intro.html": {
    "href": "articles/intro.html",
    "title": "Add your introductions here!",
    "keywords": "Add your introductions here!"
  },
  "api/Corale.Colore.Api.IChromaApi.html": {
    "href": "api/Corale.Colore.Api.IChromaApi.html",
    "title": "Interface IChromaApi",
    "keywords": "Interface IChromaApi Chroma API contract. Namespace : Corale.Colore.Api Assembly : Corale.Colore.dll Syntax public interface IChromaApi Methods CreateChromaLinkEffectAsync(Effect) Creates a new Chroma Link effect without any effect data. Declaration Task<Guid> CreateChromaLinkEffectAsync(Effect effect) Parameters Type Name Description Effect effect The type of effect to create. Returns Type Description System.Threading.Tasks.Task < System.Guid > A System.Guid for the created effect. CreateChromaLinkEffectAsync<T>(Effect, T) Creates a new Chroma Link effect with the specified effect data. Declaration Task<Guid> CreateChromaLinkEffectAsync<T>(Effect effect, T data)where T : struct, ValueType Parameters Type Name Description Effect effect The type of effect to create. T data Effect options struct. Returns Type Description System.Threading.Tasks.Task < System.Guid > A System.Guid for the created effect. Type Parameters Name Description T The effect struct type. CreateDeviceEffectAsync(Guid, Effect) Creates a new device effect without any effect data. Declaration Task<Guid> CreateDeviceEffectAsync(Guid deviceId, Effect effect) Parameters Type Name Description System.Guid deviceId The ID of the device to create the effect for. Effect effect The type of effect to create. Returns Type Description System.Threading.Tasks.Task < System.Guid > A System.Guid for the created effect. CreateDeviceEffectAsync<T>(Guid, Effect, T) Creates a new device effect with the specified effect data. Declaration Task<Guid> CreateDeviceEffectAsync<T>(Guid deviceId, Effect effect, T data)where T : struct, ValueType Parameters Type Name Description System.Guid deviceId The ID of the device to create the effect for. Effect effect The type of effect to create. T data The effect structure parameter. Returns Type Description System.Threading.Tasks.Task < System.Guid > A System.Guid for the created effect. Type Parameters Name Description T The structure type, needs to be compatible with the effect type. CreateHeadsetEffectAsync(Effect) Creates a new headset effect without any effect data. Declaration Task<Guid> CreateHeadsetEffectAsync(Effect effect) Parameters Type Name Description Effect effect The type of effect to create. Returns Type Description System.Threading.Tasks.Task < System.Guid > A System.Guid for the created effect. CreateHeadsetEffectAsync<T>(Effect, T) Creates a new headset effect with the specified effect data. Declaration Task<Guid> CreateHeadsetEffectAsync<T>(Effect effect, T data)where T : struct, ValueType Parameters Type Name Description Effect effect The type of effect to create. T data Effect options struct. Returns Type Description System.Threading.Tasks.Task < System.Guid > A System.Guid for the created effect. Type Parameters Name Description T The effect struct type. CreateKeyboardEffectAsync(Effect) Creates a new keyboard effect without any effect data. Declaration Task<Guid> CreateKeyboardEffectAsync(Effect effect) Parameters Type Name Description Effect effect The type of effect to create. Returns Type Description System.Threading.Tasks.Task < System.Guid > A System.Guid for the created effect. CreateKeyboardEffectAsync<T>(Effect, T) Creates a new keyboard effect with the specified effect data. Declaration Task<Guid> CreateKeyboardEffectAsync<T>(Effect effect, T data)where T : struct, ValueType Parameters Type Name Description Effect effect The type of effect to create. T data The effect structure parameter. Returns Type Description System.Threading.Tasks.Task < System.Guid > A System.Guid for the created effect. Type Parameters Name Description T The structure type, needs to be compatible with the effect type. CreateKeypadEffectAsync(Effect) Creates a new keypad effect without any effect data. Declaration Task<Guid> CreateKeypadEffectAsync(Effect effect) Parameters Type Name Description Effect effect THe type of effect to create. Returns Type Description System.Threading.Tasks.Task < System.Guid > A System.Guid for the created effect. CreateKeypadEffectAsync<T>(Effect, T) Creates a new keypad effect with the specified effect data. Declaration Task<Guid> CreateKeypadEffectAsync<T>(Effect effect, T data)where T : struct, ValueType Parameters Type Name Description Effect effect The type of effect to create. T data Effect options struct. Returns Type Description System.Threading.Tasks.Task < System.Guid > A System.Guid for the created effect. Type Parameters Name Description T The effect struct type. CreateMouseEffectAsync(Effect) Creates a new mouse effect without any effect data. Declaration Task<Guid> CreateMouseEffectAsync(Effect effect) Parameters Type Name Description Effect effect The type of effect to create. Returns Type Description System.Threading.Tasks.Task < System.Guid > A System.Guid for the created effect. CreateMouseEffectAsync<T>(Effect, T) Creates a new mouse effect with the specified effect data. Declaration Task<Guid> CreateMouseEffectAsync<T>(Effect effect, T data)where T : struct, ValueType Parameters Type Name Description Effect effect The type of effect to create. T data Effect options struct. Returns Type Description System.Threading.Tasks.Task < System.Guid > A System.Guid for the created effect. Type Parameters Name Description T The effect struct type. CreateMousepadEffectAsync(Effect) Creates a new mousepad effect without any effect data. Declaration Task<Guid> CreateMousepadEffectAsync(Effect effect) Parameters Type Name Description Effect effect The type of effect to create. Returns Type Description System.Threading.Tasks.Task < System.Guid > A System.Guid for the created effect. CreateMousepadEffectAsync<T>(Effect, T) Creates a new mousepad effect with the specified effect data. Declaration Task<Guid> CreateMousepadEffectAsync<T>(Effect effect, T data)where T : struct, ValueType Parameters Type Name Description Effect effect The type of effect to create. T data Effect options struct. Returns Type Description System.Threading.Tasks.Task < System.Guid > A System.Guid for the created effect. Type Parameters Name Description T The effect struct type. DeleteEffectAsync(Guid) Deletes an effect with the specified System.Guid . Declaration Task DeleteEffectAsync(Guid effectId) Parameters Type Name Description System.Guid effectId Effect ID to delete. Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation. InitializeAsync(AppInfo) Initializes the Chroma SDK. Declaration Task InitializeAsync(AppInfo info) Parameters Type Name Description AppInfo info Information about the application. Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation. QueryDeviceAsync(Guid) Query for device information. Declaration Task<SdkDeviceInfo> QueryDeviceAsync(Guid deviceId) Parameters Type Name Description System.Guid deviceId Device ID, found in Devices . Returns Type Description System.Threading.Tasks.Task < SdkDeviceInfo > A populated SdkDeviceInfo structure with information about the requested device. RegisterEventNotifications(IntPtr) Registers for Chroma SDK notifications. Declaration void RegisterEventNotifications(IntPtr windowHandle) Parameters Type Name Description System.IntPtr windowHandle App handle for the window handling events. SetEffectAsync(Guid) Set effect. Declaration Task SetEffectAsync(Guid effectId) Parameters Type Name Description System.Guid effectId Effect ID to set. Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation. UninitializeAsync() Uninitializes the Chroma SDK. Declaration Task UninitializeAsync() Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation. UnregisterEventNotifications() Unregisters from receiving Chroma SDK notifications. Declaration void UnregisterEventNotifications()"
  },
  "api/Corale.Colore.Api.html": {
    "href": "api/Corale.Colore.Api.html",
    "title": "Namespace Corale.Colore.Api",
    "keywords": "Namespace Corale.Colore.Api Classes ApiException Thrown when a cal to an API function fails. Interfaces IChromaApi Chroma API contract."
  },
  "api/Corale.Colore.ColoreProvider.html": {
    "href": "api/Corale.Colore.ColoreProvider.html",
    "title": "Class ColoreProvider",
    "keywords": "Class ColoreProvider Provides helper methods to instantiate a new IChroma instance. Inheritance System.Object ColoreProvider Namespace : Corale.Colore Assembly : Corale.Colore.dll Syntax public static class ColoreProvider : Object Methods CreateAsync(AppInfo, IChromaApi) Creates a new IChroma instance using the specified API instance. Declaration public static Task<IChroma> CreateAsync(AppInfo info, IChromaApi api) Parameters Type Name Description AppInfo info Information about the application. IChromaApi api The API instance to use to route SDK calls. Returns Type Description System.Threading.Tasks.Task < IChroma > A new instance of IChroma . CreateNativeAsync() Creates a new IChroma instance using the native Razer Chroma SDK. Declaration public static Task<IChroma> CreateNativeAsync() Returns Type Description System.Threading.Tasks.Task < IChroma > A new instance of IChroma . CreateRestAsync(AppInfo, Boolean) Creates a new IChroma instance using the Chroma REST API. Declaration public static Task<IChroma> CreateRestAsync(AppInfo info, bool ssl) Parameters Type Name Description AppInfo info Information about the application. System.Boolean ssl Whether to use the HTTPS endpoint for SDK communication. Returns Type Description System.Threading.Tasks.Task < IChroma > A new instance of IChroma . CreateRestAsync(AppInfo, String) Creates a new IChroma instance using the Chroma REST API. Declaration public static Task<IChroma> CreateRestAsync(AppInfo info, string endpoint = \"http://localhost:54235\") Parameters Type Name Description AppInfo info Information about the application. System.String endpoint The endpoint to use for initializing the Chroma SDK. Returns Type Description System.Threading.Tasks.Task < IChroma > A new instance of IChroma . CreateRestAsync(AppInfo, Uri) Creates a new IChroma instance using the Chroma REST API. Declaration public static Task<IChroma> CreateRestAsync(AppInfo info, Uri endpoint) Parameters Type Name Description AppInfo info Information about the application. System.Uri endpoint The endpoint to use for initializing the Chroma SDK. Returns Type Description System.Threading.Tasks.Task < IChroma > A new instance of IChroma ."
  },
  "api/Corale.Colore.Data.Category.html": {
    "href": "api/Corale.Colore.Data.Category.html",
    "title": "Class Category",
    "keywords": "Class Category Chroma application categories. Inheritance System.Enum Category Namespace : Corale.Colore.Data Assembly : Corale.Colore.dll Syntax public sealed class Category : Enum Fields Application Application, anything that is not a game. Declaration public const Category Application Field Value Type Description Category Game Game or other interactive entertainment. Declaration public const Category Game Field Value Type Description Category value__ Declaration public int value__ Field Value Type Description System.Int32"
  },
  "api/Corale.Colore.Data.Color.html": {
    "href": "api/Corale.Colore.Data.Color.html",
    "title": "Class Color",
    "keywords": "Class Color Represents an RGB color. Inheritance System.ValueType Color Implements System.IEquatable < Color > System.IEquatable < System.UInt32 > Namespace : Corale.Colore.Data Assembly : Corale.Colore.dll Syntax public sealed class Color : ValueType, IEquatable<Color>, IEquatable<uint> Constructors Color(Byte, Byte, Byte) Initializes a new instance of the Color struct using three distinct R, G, and B byte values. Declaration public Color(byte red, byte green, byte blue) Parameters Type Name Description System.Byte red The red component. System.Byte green The green component. System.Byte blue The blue component. Color(Double, Double, Double) Initializes a new instance of the Color struct using three System.Double values for the R, G, and B channels. Declaration public Color(double red, double green, double blue) Parameters Type Name Description System.Double red The red component ( 0.0 to 1.0 , inclusive). System.Double green The green component ( 0.0 to 1.0 , inclusive). System.Double blue The blue component ( 0.0 to 1.0 , inclusive). Remarks Each parameter value must be between 0.0 and 1.0 (inclusive). Color(Single, Single, Single) Initializes a new instance of the Color struct using three System.Single values for the R, G, and B channels. Declaration public Color(float red, float green, float blue) Parameters Type Name Description System.Single red The red component ( 0.0f to 1.0f , inclusive). System.Single green The green component ( 0.0f to 1.0f , inclusive). System.Single blue The blue component ( 0.0f to 1.0f , inclusive). Remarks Each parameter value must be between 0.0f and 1.0f (inclusive). Color(UInt32) Initializes a new instance of the Color struct using an integer color value in the format 0xKKBBGGRR . Declaration public Color(uint value) Parameters Type Name Description System.UInt32 value Value to create the color from. Fields Black Black color. Declaration public static readonly Color Black Field Value Type Description Color Blue (Dark) blue color. Declaration public static readonly Color Blue Field Value Type Description Color Green (Neon/bright) green color. Declaration public static readonly Color Green Field Value Type Description Color HotPink Hot pink color. Declaration public static readonly Color HotPink Field Value Type Description Color Orange Orange color. Declaration public static readonly Color Orange Field Value Type Description Color Pink Pink color. Declaration public static readonly Color Pink Field Value Type Description Color Purple Purple color. Declaration public static readonly Color Purple Field Value Type Description Color Red Red color. Declaration public static readonly Color Red Field Value Type Description Color White White color. Declaration public static readonly Color White Field Value Type Description Color Yellow Yellow color. Declaration public static readonly Color Yellow Field Value Type Description Color Properties B Gets the blue component of the color as a byte. Declaration public byte B { get; } Property Value Type Description System.Byte G Gets the green component of the color as a byte. Declaration public byte G { get; } Property Value Type Description System.Byte R Gets the red component of the color as a byte. Declaration public byte R { get; } Property Value Type Description System.Byte Value Gets the unsigned integer representing the color. On the form 0xKKBBGGRR . Declaration public uint Value { get; } Property Value Type Description System.UInt32 Methods Equals(Color) Returns a value indicating whether this instance of Color is equal to a Color other . Declaration public bool Equals(Color other) Parameters Type Name Description Color other The Color to check equality against. Returns Type Description System.Boolean true of the two are equal, false otherwise. Remarks Only compares the lower 32 bits of each color value, in order to be able to compare a keymode color to a non-keymode color. Equals(Object) Returns a value indicating whether this instance of Color is equal to an System.Object other . Declaration public override bool Equals(object other) Parameters Type Name Description System.Object other The System.Object to check equality against. Returns Type Description System.Boolean true if the two are equal, false otherwise. Equals(UInt32) Returns a value indicating whether this instance of Color is equal to a System.UInt32 other . Declaration public bool Equals(uint other) Parameters Type Name Description System.UInt32 other The System.UInt32 to check equality against. Returns Type Description System.Boolean true if the two are equal, false otherwise. Remarks Only compares the lower 32 bits of each value, in order to be able to compare a keymode color to a non-keymode color. FromRgb(UInt32) Creates a new Color from an RGB integer value in the format of 0xRRGGBB . Declaration public static Color FromRgb(uint value) Parameters Type Name Description System.UInt32 value The RGB value to convert from. Returns Type Description Color A new instance of the Color struct. GetHashCode() Gets the unique hash code for this Color . Declaration public override int GetHashCode() Returns Type Description System.Int32 A unique has code. ToColor(UInt32) Converts an unsigned integer value to a Color object. Declaration public static Color ToColor(uint value) Parameters Type Name Description System.UInt32 value The value to convert. Returns Type Description Color Color representation of the value. Remarks This is an alias for FromRgb(UInt32) . See Also FromRgb(UInt32) ToUInt32() Converts this instance of Color to an unsigned integer value. Declaration public uint ToUInt32() Returns Type Description System.UInt32 The unsigned integer value of this Color . Operators Equality(Color, Object) Checks left and right for equality. Declaration public static bool operator ==(Color left, object right) Parameters Type Name Description Color left Left operand, an instance of the Color struct. System.Object right Right operand, an System.Object . Returns Type Description System.Boolean true if the two instances are equal, false otherwise. Implicit(Color to UInt32) Converts a Color struct to a System.UInt32 . Declaration public static implicit operator uint (Color color) Parameters Type Name Description Color color The Color to convert. Returns Type Description System.UInt32 A System.UInt32 representing the value of the color argument. Remarks The returned System.UInt32 has a format of 0xAABBGGRR . Implicit(UInt32 to Color) Converts a uint value in the format of 0xAABBGGRR to a new instance of the Color struct. Declaration public static implicit operator Color(uint value) Parameters Type Name Description System.UInt32 value The System.UInt32 to convert, on the form 0x00BBGGRR . Returns Type Description Color An instance of Color representing the color value of value . Inequality(Color, Object) Checks left and right for inequality. Declaration public static bool operator !=(Color left, object right) Parameters Type Name Description Color left Left operand, an instance of the Color struct. System.Object right Right operand, an System.Object . Returns Type Description System.Boolean true if the two instances are not equal, false otherwise. Implements System.IEquatable<> System.IEquatable<>"
  },
  "api/Corale.Colore.Data.DeviceType.html": {
    "href": "api/Corale.Colore.Data.DeviceType.html",
    "title": "Class DeviceType",
    "keywords": "Class DeviceType Device types supported by the Chroma SDK. Inheritance System.Enum DeviceType Namespace : Corale.Colore.Data Assembly : Corale.Colore.dll Syntax public sealed class DeviceType : Enum Fields ChromaLink ChromaLink device. Declaration public const DeviceType ChromaLink Field Value Type Description DeviceType Headset A headset device. Declaration public const DeviceType Headset Field Value Type Description DeviceType Invalid Invalid device. Declaration public const DeviceType Invalid Field Value Type Description DeviceType Keyboard A keyboard device. Declaration public const DeviceType Keyboard Field Value Type Description DeviceType Keypad A keypad. Declaration public const DeviceType Keypad Field Value Type Description DeviceType Mouse A mouse device. Declaration public const DeviceType Mouse Field Value Type Description DeviceType Mousepad A mouse pad. Declaration public const DeviceType Mousepad Field Value Type Description DeviceType System System device. Declaration public const DeviceType System Field Value Type Description DeviceType value__ Declaration public int value__ Field Value Type Description System.Int32"
  },
  "api/Corale.Colore.Data.Devices.html": {
    "href": "api/Corale.Colore.Data.Devices.html",
    "title": "Class Devices",
    "keywords": "Class Devices Contains device IDs for devices that have Chroma support. Inheritance System.Object Devices Namespace : Corale.Colore.Data Assembly : Corale.Colore.dll Syntax public static class Devices : Object Fields Blackwidow Blackwidow Chroma edition. Declaration public static readonly Guid Blackwidow Field Value Type Description System.Guid BlackwidowTe BlackWidow TE Chroma edition. Declaration public static readonly Guid BlackwidowTe Field Value Type Description System.Guid BlackwidowX Blackwidow X Keyboard. Declaration public static readonly Guid BlackwidowX Field Value Type Description System.Guid BlackwidowXTe Blackwidow X TE Keyboard. Declaration public static readonly Guid BlackwidowXTe Field Value Type Description System.Guid Blade14 Blade 14 (2016 edition). Declaration public static readonly Guid Blade14 Field Value Type Description System.Guid BladeStealth Blade Stealth. Declaration public static readonly Guid BladeStealth Field Value Type Description System.Guid Core Core (external graphics enclosure). Declaration public static readonly Guid Core Field Value Type Description System.Guid Deathadder Deathadder Chroma edition. Declaration public static readonly Guid Deathadder Field Value Type Description System.Guid Deathstalker Deathstalker Chroma edition. Declaration public static readonly Guid Deathstalker Field Value Type Description System.Guid Diamondback Diamondback Chroma edition. Declaration public static readonly Guid Diamondback Field Value Type Description System.Guid Firefly Firefly Chroma edition. Declaration public static readonly Guid Firefly Field Value Type Description System.Guid Kraken71 Kraken 7.1 Chroma edition. Declaration public static readonly Guid Kraken71 Field Value Type Description System.Guid LenovoY27 Chroma enabled Lenovo Y27. Declaration public static readonly Guid LenovoY27 Field Value Type Description System.Guid LenovoY900 Chroma enabled Lenovo Y900. Declaration public static readonly Guid LenovoY900 Field Value Type Description System.Guid Mamba Mamba (wireless) Chroma edition. Declaration public static readonly Guid Mamba Field Value Type Description System.Guid MambaTe Mamba TE Chroma edition. Declaration public static readonly Guid MambaTe Field Value Type Description System.Guid Naga Naga Chroma edition. Declaration public static readonly Guid Naga Field Value Type Description System.Guid NagaEpic Naga Epic Chroma edition. Declaration public static readonly Guid NagaEpic Field Value Type Description System.Guid NagaHex Naga Hex V2 Declaration public static readonly Guid NagaHex Field Value Type Description System.Guid Orbweaver Orbweaver Chroma edition. Declaration public static readonly Guid Orbweaver Field Value Type Description System.Guid Ornata Razer Ornata Keyboard. Declaration public static readonly Guid Ornata Field Value Type Description System.Guid Orochi Orochi Chroma edition. Declaration public static readonly Guid Orochi Field Value Type Description System.Guid OverwatchKeyboard Overwatch Keyboard. Declaration public static readonly Guid OverwatchKeyboard Field Value Type Description System.Guid Tartarus Tartarus Chroma edition. Declaration public static readonly Guid Tartarus Field Value Type Description System.Guid Methods GetDescription(Guid) Gets the description associated with a specified device ID. Declaration public static string GetDescription(Guid deviceId) Parameters Type Name Description System.Guid deviceId The device ID to get a description for. Returns Type Description System.String The description of the device. Exceptions Type Condition System.ArgumentException Thrown if the device ID is invalid. GetName(Guid) Gets the name associated with a specified device ID. Declaration public static string GetName(Guid deviceId) Parameters Type Name Description System.Guid deviceId The device ID to get a name for. Returns Type Description System.String The name of the device. Exceptions Type Condition System.ArgumentException Thrown if the device ID is invalid. IsValidId(Guid) Returns whether a specified System.Guid is a valid device identifier. Declaration public static bool IsValidId(Guid id) Parameters Type Name Description System.Guid id the System.Guid to check. Returns Type Description System.Boolean true if it's a valid device identifier, otherwise false ."
  },
  "api/Corale.Colore.Data.SdkDeviceInfo.html": {
    "href": "api/Corale.Colore.Data.SdkDeviceInfo.html",
    "title": "Class SdkDeviceInfo",
    "keywords": "Class SdkDeviceInfo Information about a device. Inheritance System.ValueType SdkDeviceInfo Implements System.IEquatable < SdkDeviceInfo > Namespace : Corale.Colore.Data Assembly : Corale.Colore.dll Syntax public sealed class SdkDeviceInfo : ValueType, IEquatable<SdkDeviceInfo> Fields Connected Whether this device is connected. Declaration public readonly bool Connected Field Value Type Description System.Boolean Type The type of device this is. Declaration public readonly DeviceType Type Field Value Type Description DeviceType Methods Equals(SdkDeviceInfo) Indicates whether the current object is equal to another object of the same type. Declaration public bool Equals(SdkDeviceInfo other) Parameters Type Name Description SdkDeviceInfo other An object to compare with this object. Returns Type Description System.Boolean true if the current object is equal to the other parameter; otherwise, false . Equals(Object) Indicates whether this instance and a specified object are equal. Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj The object to compare with the current instance. Returns Type Description System.Boolean true if obj and this instance are the same type and represent the same value; otherwise, false . GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description System.Int32 A 32-bit signed integer that is the hash code for this instance. Operators Equality(SdkDeviceInfo, SdkDeviceInfo) Checks an instance of SdkDeviceInfo for equality with another SdkDeviceInfo instance. Declaration public static bool operator ==(SdkDeviceInfo left, SdkDeviceInfo right) Parameters Type Name Description SdkDeviceInfo left Left operand. SdkDeviceInfo right Right operand. Returns Type Description System.Boolean true if the two instances are equal, otherwise false . Inequality(SdkDeviceInfo, SdkDeviceInfo) Checks an instance of SdkDeviceInfo for inequality with another SdkDeviceInfo instance. Declaration public static bool operator !=(SdkDeviceInfo left, SdkDeviceInfo right) Parameters Type Name Description SdkDeviceInfo left Left operand. SdkDeviceInfo right Right operand. Returns Type Description System.Boolean true if the two instances are not equal, otherwise false . Implements System.IEquatable<>"
  },
  "api/Corale.Colore.Data.html": {
    "href": "api/Corale.Colore.Data.html",
    "title": "Namespace Corale.Colore.Data",
    "keywords": "Namespace Corale.Colore.Data Classes AppInfo Contains information about an application wishing to use the Chroma SDK. Author Contains author information for a Chroma application. Category Chroma application categories. Color Represents an RGB color. Constants The definitions of generic constant values used in the project DeviceInfo Contains information about a device. Devices Contains device IDs for devices that have Chroma support. DeviceType Device types supported by the Chroma SDK. Result Struct for containing the result of running a native Chroma SDK function. SdkDeviceInfo Information about a device. SdkVersion Describes an SDK version."
  },
  "api/Corale.Colore.Effects.ChromaLink.ChromaLinkConstants.html": {
    "href": "api/Corale.Colore.Effects.ChromaLink.ChromaLinkConstants.html",
    "title": "Class ChromaLinkConstants",
    "keywords": "Class ChromaLinkConstants Chroma Link constants. Inheritance System.Object ChromaLinkConstants Namespace : Corale.Colore.Effects.ChromaLink Assembly : Corale.Colore.dll Syntax public static class ChromaLinkConstants : Object Fields MaxLeds Maximum number of LEDs. Declaration public const int MaxLeds = 5 Field Value Type Description System.Int32"
  },
  "api/Corale.Colore.Effects.ChromaLink.Static.html": {
    "href": "api/Corale.Colore.Effects.ChromaLink.Static.html",
    "title": "Class Static",
    "keywords": "Class Static Static color effect. Inheritance System.ValueType Static Implements System.IEquatable < Static > Namespace : Corale.Colore.Effects.ChromaLink Assembly : Corale.Colore.dll Syntax public sealed class Static : ValueType, IEquatable<Static> Constructors Static(Color) Initializes a new instance of the Static struct. Declaration public Static(Color color) Parameters Type Name Description Color color Color to set. Fields Color Color to use. Declaration public readonly Color Color Field Value Type Description Color Methods Equals(Static) Indicates whether the current object is equal to another object of the same type. Declaration public bool Equals(Static other) Parameters Type Name Description Static other An object to compare with this object. Returns Type Description System.Boolean true if the current object is equal to the other parameter; otherwise, false . Equals(Object) Indicates whether this instance and a specified object are equal. Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj The object to compare with the current instance. Returns Type Description System.Boolean true if obj and this instance are the same type and represent the same value; otherwise, false . GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description System.Int32 A 32-bit signed integer that is the hash code for this instance. Operators Equality(Static, Static) Checks an instance of Static for equality with another Static instance. Declaration public static bool operator ==(Static left, Static right) Parameters Type Name Description Static left Left operand. Static right Right operand. Returns Type Description System.Boolean true if the two instances are equal, otherwise false . Inequality(Static, Static) Checks an instance of Static for inequality with another Static instance. Declaration public static bool operator !=(Static left, Static right) Parameters Type Name Description Static left Left operand. Static right Right operand. Returns Type Description System.Boolean true if the two instances are not equal, otherwise false . Implements System.IEquatable<>"
  },
  "api/Corale.Colore.Effects.ChromaLink.html": {
    "href": "api/Corale.Colore.Effects.ChromaLink.html",
    "title": "Namespace Corale.Colore.Effects.ChromaLink",
    "keywords": "Namespace Corale.Colore.Effects.ChromaLink Classes ChromaLinkConstants Chroma Link constants. Custom Custom effect. Effect Supported built-in Chroma Link effects. Static Static color effect."
  },
  "api/Corale.Colore.Effects.Headset.Effect.html": {
    "href": "api/Corale.Colore.Effects.Headset.Effect.html",
    "title": "Class Effect",
    "keywords": "Class Effect Standard effects for headsets. Inheritance System.Enum Effect Namespace : Corale.Colore.Effects.Headset Assembly : Corale.Colore.dll Syntax public sealed class Effect : Enum Fields Custom Custom headset effect. Declaration public const Effect Custom Field Value Type Description Effect Invalid Invalid effect. Declaration public const Effect Invalid Field Value Type Description Effect None No effect. Declaration public const Effect None Field Value Type Description Effect Static Static color. Declaration public const Effect Static Field Value Type Description Effect value__ Declaration public int value__ Field Value Type Description System.Int32"
  },
  "api/Corale.Colore.Effects.Headset.HeadsetConstants.html": {
    "href": "api/Corale.Colore.Effects.Headset.HeadsetConstants.html",
    "title": "Class HeadsetConstants",
    "keywords": "Class HeadsetConstants Contains various headset constants used in Razer's API. Inheritance System.Object HeadsetConstants Namespace : Corale.Colore.Effects.Headset Assembly : Corale.Colore.dll Syntax public static class HeadsetConstants : Object Fields MaxLeds The maximum number of LEDs on a headset. Declaration public const int MaxLeds = 5 Field Value Type Description System.Int32"
  },
  "api/Corale.Colore.Effects.Keyboard.Custom.html": {
    "href": "api/Corale.Colore.Effects.Keyboard.Custom.html",
    "title": "Class Custom",
    "keywords": "Class Custom Describes a custom grid effect for every key. Inheritance System.ValueType Custom Implements System.IEquatable < Custom > Namespace : Corale.Colore.Effects.Keyboard Assembly : Corale.Colore.dll Syntax public sealed class Custom : ValueType, IEquatable<Custom> Constructors Custom(Color) Initializes a new instance of the Custom struct with every position set to a specific color. Declaration public Custom(Color color) Parameters Type Name Description Color color The Color to set each position to. Custom(Custom) Initializes a new instance of the Custom struct with the colors copied from another struct of the same type. Declaration public Custom(Custom other) Parameters Type Name Description Custom other The Custom struct to copy data from. Properties Item[Key] Gets or sets the color for a specific key in the custom grid. The SDK will handle translation of location data to access the correct key depending on user configuration. Declaration public Color this[Key key] { get; set; } Parameters Type Name Description Key key The Key to access. Property Value Type Description Color The Color for the specified key. Remarks Please note that the position of a key accessed in this way is not guaranteed to be correct, as different layouts on different keyboards can place these keys in other locations. Item[Int32] Gets or sets a position in the custom grid. Declaration public Color this[int index] { get; set; } Parameters Type Name Description System.Int32 index The index to access, zero indexed. Property Value Type Description Color The Color at the specified position. Item[Int32, Int32] Gets or sets cells in the custom grid. Declaration public Color this[int row, int column] { get; set; } Parameters Type Name Description System.Int32 row Row to access, zero indexed. System.Int32 column Column to access, zero indexed. Property Value Type Description Color The Color at the specified position. Methods Clear() Clears the colors from the grid, setting them to Black . Declaration public void Clear() Clone() Returns a copy of this struct. Declaration public Custom Clone() Returns Type Description Custom A copy of this struct. Create() Creates a new empty Custom struct. Declaration public static Custom Create() Returns Type Description Custom An instance of Custom filled with the color black. Equals(Custom) Indicates whether the current object is equal to another object of the same type. Declaration public bool Equals(Custom other) Parameters Type Name Description Custom other A Custom to compare with this object. Returns Type Description System.Boolean true if the current object is equal to the other parameter; otherwise, false . Equals(Object) Indicates whether this instance and a specified object are equal. Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Another object to compare to. Returns Type Description System.Boolean true if obj and this instance are of compatible types and represent the same value; otherwise, false . GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description System.Int32 A 32-bit signed integer that is the hash code for this instance. Set(Color) Sets the entire grid to a specific Color . Declaration public void Set(Color color) Parameters Type Name Description Color color The Color to apply. Operators Equality(Custom, Object) Compares an instance of Custom with another object for equality. Declaration public static bool operator ==(Custom left, object right) Parameters Type Name Description Custom left The left operand, an instance of Custom . System.Object right The right operand, any type of object. Returns Type Description System.Boolean true if the two objects are equal, otherwise false . Inequality(Custom, Object) Compares an instance of Custom with another object for inequality. Declaration public static bool operator !=(Custom left, object right) Parameters Type Name Description Custom left The left operand, an instance of Custom . System.Object right The right operand, any type of object. Returns Type Description System.Boolean true if the two objects are not equal, otherwise false . Implements System.IEquatable<>"
  },
  "api/Corale.Colore.Effects.Keyboard.DeathstalkerGrid.html": {
    "href": "api/Corale.Colore.Effects.Keyboard.DeathstalkerGrid.html",
    "title": "Class DeathstalkerGrid",
    "keywords": "Class DeathstalkerGrid Describes a custom grid effect for every key. Inheritance System.ValueType DeathstalkerGrid Implements System.IEquatable < DeathstalkerGrid > Namespace : Corale.Colore.Effects.Keyboard Assembly : Corale.Colore.dll Syntax public sealed class DeathstalkerGrid : ValueType, IEquatable<DeathstalkerGrid> Remarks This effect is only used for compatibility with the Razer Deathstalker Chroma keyboard. Constructors DeathstalkerGrid(Color) Initializes a new instance of the DeathstalkerGrid struct with every position set to a specific color. Declaration public DeathstalkerGrid(Color color) Parameters Type Name Description Color color The Color to set each position to. DeathstalkerGrid(DeathstalkerGrid) Initializes a new instance of the DeathstalkerGrid struct with the colors copied from another struct of the same type. Declaration public DeathstalkerGrid(DeathstalkerGrid other) Parameters Type Name Description DeathstalkerGrid other The Custom struct to copy data from. Properties Item[Int32] Gets or sets a position in the custom grid. Declaration public Color this[int index] { get; set; } Parameters Type Name Description System.Int32 index The index to access, zero indexed. Property Value Type Description Color The Color at the specified position. Methods Clear() Clears the colors from the grid, setting them to Black . Declaration public void Clear() Clone() Returns a copy of this struct. Declaration public DeathstalkerGrid Clone() Returns Type Description DeathstalkerGrid A copy of this struct. Create() Creates a new empty DeathstalkerGrid struct. Declaration public static DeathstalkerGrid Create() Returns Type Description DeathstalkerGrid An instance of DeathstalkerGrid filled with the color black. Equals(DeathstalkerGrid) Indicates whether the current object is equal to another object of the same type. Declaration public bool Equals(DeathstalkerGrid other) Parameters Type Name Description DeathstalkerGrid other A Custom to compare with this object. Returns Type Description System.Boolean true if the current object is equal to the other parameter; otherwise, false . Equals(Object) Indicates whether this instance and a specified object are equal. Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Another object to compare to. Returns Type Description System.Boolean true if obj and this instance are of compatible types and represent the same value; otherwise, false . GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description System.Int32 A 32-bit signed integer that is the hash code for this instance. Set(Color) Sets the entire grid to a specific Color . Declaration public void Set(Color color) Parameters Type Name Description Color color The Color to apply. Operators Equality(DeathstalkerGrid, Object) Compares an instance of DeathstalkerGrid with another object for equality. Declaration public static bool operator ==(DeathstalkerGrid left, object right) Parameters Type Name Description DeathstalkerGrid left The left operand, an instance of DeathstalkerGrid . System.Object right The right operand, any type of object. Returns Type Description System.Boolean true if the two objects are equal, otherwise false . Inequality(DeathstalkerGrid, Object) Compares an instance of DeathstalkerGrid with another object for inequality. Declaration public static bool operator !=(DeathstalkerGrid left, object right) Parameters Type Name Description DeathstalkerGrid left The left operand, an instance of DeathstalkerGrid . System.Object right The right operand, any type of object. Returns Type Description System.Boolean true if the two objects are not equal, otherwise false . Implements System.IEquatable<>"
  },
  "api/Corale.Colore.Effects.Keyboard.KeyboardConstants.html": {
    "href": "api/Corale.Colore.Effects.Keyboard.KeyboardConstants.html",
    "title": "Class KeyboardConstants",
    "keywords": "Class KeyboardConstants Holds various keyboard constants used in Razer's API. Inheritance System.Object KeyboardConstants Namespace : Corale.Colore.Effects.Keyboard Assembly : Corale.Colore.dll Syntax public static class KeyboardConstants : Object Fields MaxColumns The maximum number of columns on the keyboard Declaration public const int MaxColumns = 22 Field Value Type Description System.Int32 MaxCustomEffects The maximum number of custom effects based on the maximum keys Declaration public const int MaxCustomEffects = 132 Field Value Type Description System.Int32 MaxDeathstalkerZones The maximum number of Deathstalker color zones. Declaration public const int MaxDeathstalkerZones = 6 Field Value Type Description System.Int32 MaxKeys The maximum number of keys on the keyboard Declaration public const int MaxKeys = 132 Field Value Type Description System.Int32 MaxRows The maximum number of rows on the keyboard Declaration public const int MaxRows = 6 Field Value Type Description System.Int32"
  },
  "api/Corale.Colore.Effects.Keyboard.Static.html": {
    "href": "api/Corale.Colore.Effects.Keyboard.Static.html",
    "title": "Class Static",
    "keywords": "Class Static Describes the static effect type. Inheritance System.ValueType Static Implements System.IEquatable < Static > Namespace : Corale.Colore.Effects.Keyboard Assembly : Corale.Colore.dll Syntax public sealed class Static : ValueType, IEquatable<Static> Constructors Static(Color) Initializes a new instance of the Static struct. Declaration public Static(Color color) Parameters Type Name Description Color color Color to apply. Fields Color Color of the effect. Declaration public readonly Color Color Field Value Type Description Color Methods Equals(Static) Indicates whether the current object is equal to another object of the same type. Declaration public bool Equals(Static other) Parameters Type Name Description Static other An object to compare with this object. Returns Type Description System.Boolean true if the current object is equal to the other parameter; otherwise, false . Equals(Object) Indicates whether this instance and a specified object are equal. Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj The object to compare with the current instance. Returns Type Description System.Boolean true if obj and this instance are the same type and represent the same value; otherwise, false . GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description System.Int32 A 32-bit signed integer that is the hash code for this instance. Operators Equality(Static, Static) Checks an instance of Static for equality with another Static instance. Declaration public static bool operator ==(Static left, Static right) Parameters Type Name Description Static left Left operand. Static right Right operand. Returns Type Description System.Boolean true if the two instances are equal, otherwise false . Inequality(Static, Static) Checks an instance of Static for inequality with another Static instance. Declaration public static bool operator !=(Static left, Static right) Parameters Type Name Description Static left Left operand. Static right Right operand. Returns Type Description System.Boolean true if the two instances are not equal, otherwise false . Implements System.IEquatable<>"
  },
  "api/Corale.Colore.Effects.Keyboard.html": {
    "href": "api/Corale.Colore.Effects.Keyboard.html",
    "title": "Namespace Corale.Colore.Effects.Keyboard",
    "keywords": "Namespace Corale.Colore.Effects.Keyboard Classes Custom Describes a custom grid effect for every key. DeathstalkerGrid Describes a custom grid effect for every key. Effect Supported built-in keyboard effects. Key Definition of all keys available on the keyboard. KeyboardConstants Holds various keyboard constants used in Razer's API. Static Describes the static effect type."
  },
  "api/Corale.Colore.Effects.Keypad.Custom.html": {
    "href": "api/Corale.Colore.Effects.Keypad.Custom.html",
    "title": "Class Custom",
    "keywords": "Class Custom Custom effect. Inheritance System.ValueType Custom Implements System.IEquatable < Custom > System.IEquatable < Color [][]> System.IEquatable < Color []> Namespace : Corale.Colore.Effects.Keypad Assembly : Corale.Colore.dll Syntax public sealed class Custom : ValueType, IEquatable<Custom>, IEquatable<Color[][]>, IEquatable<Color[]> Constructors Custom(Color) Initializes a new instance of the Custom struct with every position set to a specific color. Declaration public Custom(Color color) Parameters Type Name Description Color color The Color to set each position to. Custom(Color[][]) Initializes a new instance of the Custom struct. Declaration public Custom(Color[][] colors) Parameters Type Name Description Color [][] colors The colors to use. Exceptions Type Condition System.ArgumentException Thrown if the colors array supplied is of an incorrect size. Custom(Custom) Initializes a new instance of the Custom struct with color values copied from another struct of the same type. Declaration public Custom(Custom other) Parameters Type Name Description Custom other The struct to copy data from. Custom(IList<Color>) Initializes a new instance of the Custom struct. Declaration public Custom(IList<Color> colors) Parameters Type Name Description System.Collections.Generic.IList < Color > colors The colors to use. Exceptions Type Condition System.ArgumentException Thrown if the colors array supplied is of an invalid size. Properties Item[Int32] Gets or sets a position in the custom grid. Declaration public Color this[int index] { get; set; } Parameters Type Name Description System.Int32 index The index to access, zero indexed. Property Value Type Description Color The Color at the specified position. Item[Int32, Int32] Gets or sets cells in the custom grid. Declaration public Color this[int row, int column] { get; set; } Parameters Type Name Description System.Int32 row Row to access, zero indexed. System.Int32 column Column to access, zero indexed. Property Value Type Description Color The Color at the specified position. Methods Clear() Clears the colors from the grid, setting them to Black . Declaration public void Clear() Clone() Returns a copy of this struct. Declaration public Custom Clone() Returns Type Description Custom A copy of this struct. Create() Creates a new empty Custom struct. Declaration public static Custom Create() Returns Type Description Custom An instance of Custom filled with the color black. Equals(Color[]) Indicates whether the current object is equal to an instance of an array of Color . Declaration public bool Equals(Color[] other) Parameters Type Name Description Color [] other An array of Color to compare with this object. Returns Type Description System.Boolean true if the other object has the same number of elements, and contain matching colors; otherwise, false . Equals(Color[][]) Indicates whether the current object is equal to an instance of a 2-dimensional array of Color . Declaration public bool Equals(Color[][] other) Parameters Type Name Description Color [][] other A 2-dimensional array of Color to compare with this object. Returns Type Description System.Boolean true if the other object has the same number of rows and columns, and contain matching colors; otherwise, false . Equals(Custom) Indicates whether the current object is equal to another object of the same type. Declaration public bool Equals(Custom other) Parameters Type Name Description Custom other A Custom to compare with this object. Returns Type Description System.Boolean true if the current object is equal to the other parameter; otherwise, false . Equals(Object) Indicates whether this instance and a specified object are equal. Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Another object to compare to. Returns Type Description System.Boolean true if obj and this instance are of compatible types and represent the same value; otherwise, false . GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description System.Int32 A 32-bit signed integer that is the hash code for this instance. Set(Color) Sets all LED indices to the specified Color . Declaration public void Set(Color color) Parameters Type Name Description Color color The Color to set. Operators Equality(Custom, Object) Compares an instance of Custom with another object for equality. Declaration public static bool operator ==(Custom left, object right) Parameters Type Name Description Custom left The left operand, an instance of Custom . System.Object right The right operand, any type of object. Returns Type Description System.Boolean true if the two objects are equal, otherwise false . Inequality(Custom, Object) Compares an instance of Custom with another object for inequality. Declaration public static bool operator !=(Custom left, object right) Parameters Type Name Description Custom left The left operand, an instance of Custom . System.Object right The right operand, any type of object. Returns Type Description System.Boolean true if the two objects are not equal, otherwise false . Implements System.IEquatable<> System.IEquatable<> System.IEquatable<>"
  },
  "api/Corale.Colore.Effects.Mouse.html": {
    "href": "api/Corale.Colore.Effects.Mouse.html",
    "title": "Namespace Corale.Colore.Effects.Mouse",
    "keywords": "Namespace Corale.Colore.Effects.Mouse Classes Custom Custom grid effect for mouse LEDs. Effect Supported built-in mouse effects. GridLed LED definitions for the virtual grid. Led LEDs that can be the target of color changes. MouseConstants Mouse constants. Static Describes the static effect type."
  },
  "api/Corale.Colore.Effects.Mousepad.Custom.html": {
    "href": "api/Corale.Colore.Effects.Mousepad.Custom.html",
    "title": "Class Custom",
    "keywords": "Class Custom Custom effect for mouse pad. Inheritance System.ValueType Custom Implements System.IEquatable < Custom > System.IEquatable < System.Collections.Generic.IList < Color >> Namespace : Corale.Colore.Effects.Mousepad Assembly : Corale.Colore.dll Syntax public sealed class Custom : ValueType, IEquatable<Custom>, IEquatable<IList<Color>> Constructors Custom(Color) Initializes a new instance of the Custom struct with a default color to apply to every LED. Declaration public Custom(Color color) Parameters Type Name Description Color color The color to set every LED to initially. Custom(Custom) Initializes a new instance of the Custom struct with the colors copied from another struct of the same type. Declaration public Custom(Custom other) Parameters Type Name Description Custom other The struct to copy data from. Custom(IList<Color>) Initializes a new instance of the Custom struct. Declaration public Custom(IList<Color> colors) Parameters Type Name Description System.Collections.Generic.IList < Color > colors The colors to use. Exceptions Type Condition System.ArgumentException Thrown if the colors list supplied is of an incorrect size. Properties Item[Int32] Gets or sets LEDs in the custom array. Declaration public Color this[int led] { get; set; } Parameters Type Name Description System.Int32 led Index of the LED to access. Property Value Type Description Color The Color at the specified position. Methods Clear() Clears the colors in this Custom struct (sets to Black ). Declaration public void Clear() Clone() Returns a copy of this struct. Declaration public Custom Clone() Returns Type Description Custom A copy of this struct. Create() Create a new empty Custom struct. Declaration public static Custom Create() Returns Type Description Custom An instance of Custom filled with the color black. Equals(Custom) Indicates whether the current object is equal to another object of the same type. Declaration public bool Equals(Custom other) Parameters Type Name Description Custom other An object to compare with this object. Returns Type Description System.Boolean true if the current object is equal to the other parameter; otherwise, false . Equals(IList<Color>) Indicates whether the current object is equal to an instance of System.Collections.Generic.IList<> . Declaration public bool Equals(IList<Color> other) Parameters Type Name Description System.Collections.Generic.IList < Color > other An object to compare with this object. Returns Type Description System.Boolean true if the current object is equal to the other parameter; otherwise, false . Equals(Object) Indicates whether this instance and a specified object are equal. Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Another object to compare to. Returns Type Description System.Boolean true if obj and this instance are the same type and represent the same value; otherwise, false . GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description System.Int32 A 32-bit signed integer that is the hash code for this instance. Set(Color) Sets all the LED indices to the specified Color . Declaration public void Set(Color color) Parameters Type Name Description Color color The Color to set the LEDs to. Operators Equality(Custom, Object) Compares an instance of Custom with another object for equality. Declaration public static bool operator ==(Custom left, object right) Parameters Type Name Description Custom left The left operand, an instance of Custom . System.Object right The right operand, any type of object. Returns Type Description System.Boolean true if the two objects are equal, otherwise false . Inequality(Custom, Object) Compares an instance of Custom with another object for inequality. Declaration public static bool operator !=(Custom left, object right) Parameters Type Name Description Custom left The left operand, an instance of Custom . System.Object right The right operand, any type of object. Returns Type Description System.Boolean true if the two objects are not equal, otherwise false . Implements System.IEquatable<> System.IEquatable<>"
  },
  "api/Corale.Colore.Effects.Mousepad.Effect.html": {
    "href": "api/Corale.Colore.Effects.Mousepad.Effect.html",
    "title": "Class Effect",
    "keywords": "Class Effect Effects supported by Chroma mouse pads. Inheritance System.Enum Effect Namespace : Corale.Colore.Effects.Mousepad Assembly : Corale.Colore.dll Syntax public sealed class Effect : Enum Fields Custom A custom effect. Declaration public const Effect Custom Field Value Type Description Effect Invalid Invalid effect type. Declaration public const Effect Invalid Field Value Type Description Effect None No effect. Declaration public const Effect None Field Value Type Description Effect Static Static color. Declaration public const Effect Static Field Value Type Description Effect value__ Declaration public int value__ Field Value Type Description System.Int32"
  },
  "api/Corale.Colore.Effects.Mousepad.MousepadConstants.html": {
    "href": "api/Corale.Colore.Effects.Mousepad.MousepadConstants.html",
    "title": "Class MousepadConstants",
    "keywords": "Class MousepadConstants Mouse pad constants. Inheritance System.Object MousepadConstants Namespace : Corale.Colore.Effects.Mousepad Assembly : Corale.Colore.dll Syntax public static class MousepadConstants : Object Fields MaxLeds Maximum number of LEDs. Declaration public const int MaxLeds = 15 Field Value Type Description System.Int32"
  },
  "api/Corale.Colore.Events.SdkSupportEventArgs.html": {
    "href": "api/Corale.Colore.Events.SdkSupportEventArgs.html",
    "title": "Class SdkSupportEventArgs",
    "keywords": "Class SdkSupportEventArgs Event arguments for the Chroma SDK support event. Inheritance System.EventArgs SdkSupportEventArgs Namespace : Corale.Colore.Events Assembly : Corale.Colore.dll Syntax public sealed class SdkSupportEventArgs : EventArgs Constructors SdkSupportEventArgs(Boolean) Initializes a new instance of the SdkSupportEventArgs class. Declaration public SdkSupportEventArgs(bool enabled) Parameters Type Name Description System.Boolean enabled Value indicating whether SDK support is enabled. Properties Enabled Gets a value indicating whether SDK support is enabled. Declaration public bool Enabled { get; } Property Value Type Description System.Boolean"
  },
  "api/Corale.Colore.Events.html": {
    "href": "api/Corale.Colore.Events.html",
    "title": "Namespace Corale.Colore.Events",
    "keywords": "Namespace Corale.Colore.Events Classes ApplicationStateEventArgs Event arguments for the application state event. DeviceAccessEventArgs Event arguments for the device access event. SdkSupportEventArgs Event arguments for the Chroma SDK support event."
  },
  "api/Corale.Colore.IChroma.html": {
    "href": "api/Corale.Colore.IChroma.html",
    "title": "Interface IChroma",
    "keywords": "Interface IChroma Interface for basic Chroma functionality. Namespace : Corale.Colore Assembly : Corale.Colore.dll Syntax public interface IChroma Properties ChromaLink Gets an instance of the IChromaLink interface for interacting with ChromaLink devices. Declaration IChromaLink ChromaLink { get; } Property Value Type Description IChromaLink Headset Gets an instance of the IHeadset interface for interacting with a Razer Chroma headset. Declaration IHeadset Headset { get; } Property Value Type Description IHeadset Initialized Gets a value indicating whether the Chroma SDK has been initialized or not. Declaration bool Initialized { get; } Property Value Type Description System.Boolean Keyboard Gets an instance of the IKeyboard interface for interacting with a Razer Chroma keyboard. Declaration IKeyboard Keyboard { get; } Property Value Type Description IKeyboard Keypad Gets an instance of the IKeypad interface for interacting with a Razer Chroma keypad. Declaration IKeypad Keypad { get; } Property Value Type Description IKeypad Mouse Gets an instance of the IMouse interface for interacting with a Razer Chroma mouse. Declaration IMouse Mouse { get; } Property Value Type Description IMouse Mousepad Gets an instance of the IMousepad interface for interacting with a Razer Chroma mouse pad. Declaration IMousepad Mousepad { get; } Property Value Type Description IMousepad SdkVersion Gets the version of the Chroma SDK that Colore is currently using. Declaration SdkVersion SdkVersion { get; } Property Value Type Description SdkVersion Version Gets the System.Version of Colore. Declaration Version Version { get; } Property Value Type Description System.Version Methods GetDeviceAsync(Guid) Gets an instance of IGenericDevice for the device with the specified ID. Declaration Task<IGenericDevice> GetDeviceAsync(Guid deviceId) Parameters Type Name Description System.Guid deviceId The System.Guid of the device to get, valid IDs can be found in Devices . Returns Type Description System.Threading.Tasks.Task < IGenericDevice > An instance of IGenericDevice . HandleMessage(IntPtr, Int32, IntPtr, IntPtr) Handles a Windows message and fires the appropriate events. Declaration bool HandleMessage(IntPtr handle, int msgId, IntPtr wParam, IntPtr lParam) Parameters Type Name Description System.IntPtr handle The HWnd property of the Message struct. System.Int32 msgId The Msg property of the Message struct. System.IntPtr wParam The wParam property of the Message struct. System.IntPtr lParam The lParam property of the Message struct. Returns Type Description System.Boolean true if the message was handled by Chroma, false otherwise (message was ignored). Remarks Non-Chroma messages will be ignored. InitializeAsync(AppInfo) Initializes the SDK if it hasn't already. Declaration Task InitializeAsync(AppInfo info) Parameters Type Name Description AppInfo info Information about the application. Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation. Remarks Manually modifying the SDK init state is untested and may result in undefined behaviour , usage is at your own risk . QueryAsync(Guid) Queries the SDK for information regarding a specific device. Declaration Task<DeviceInfo> QueryAsync(Guid deviceId) Parameters Type Name Description System.Guid deviceId The device ID to query for, valid IDs can be found in Devices . Returns Type Description System.Threading.Tasks.Task < DeviceInfo > A struct with information regarding the device type and whether it's connected. Register(IntPtr) Registers to start receiving Chroma events. Declaration void Register(IntPtr handle) Parameters Type Name Description System.IntPtr handle Handle to the application Window that is running the message loop. Remarks Chroma events are sent using the Windows message API, as such, there has to be something handling Windows messages to receive them. Messages need to be passed to the message handler in Colore to be processed, as this cannot be automated. SetAllAsync(Color) Sets all Chroma devices to the specified Color . Declaration Task SetAllAsync(Color color) Parameters Type Name Description Color color The Color to set. Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation. UninitializeAsync() Uninitializes the SDK if it has been initialized. Declaration Task UninitializeAsync() Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation. Remarks Manually modifying the SDK init state is untested and may result in undefined behaviour , usage is at your own risk . Unregister() Unregisters from receiving Chroma events. Declaration void Unregister() Events ApplicationState Raised when information about application state is received from messages. Declaration event EventHandler<ApplicationStateEventArgs> ApplicationState Event Type Type Description System.EventHandler < ApplicationStateEventArgs > Remarks Requires that application has registered for receiving messages with Register(IntPtr) and that Windows messages are being forwarded to Colore using HandleMessage(IntPtr, Int32, IntPtr, IntPtr) . DeviceAccess Raised when information about device access is received from messages. Declaration event EventHandler<DeviceAccessEventArgs> DeviceAccess Event Type Type Description System.EventHandler < DeviceAccessEventArgs > Remarks Requires that application has registered for receiving messages with Register(IntPtr) and that Windows messages are being forwarded to Colore using HandleMessage(IntPtr, Int32, IntPtr, IntPtr) . SdkSupport Raised when information about SDK support is received from messages. Declaration event EventHandler<SdkSupportEventArgs> SdkSupport Event Type Type Description System.EventHandler < SdkSupportEventArgs > Remarks Requires that application has registered for receiving messages with Register(IntPtr) and that Windows messages are being forwarded to Colore using HandleMessage(IntPtr, Int32, IntPtr, IntPtr) ."
  },
  "api/Corale.Colore.IChromaLink.html": {
    "href": "api/Corale.Colore.IChromaLink.html",
    "title": "Interface IChromaLink",
    "keywords": "Interface IChromaLink Interface for Chroma Link functionality. Inherited Members IDevice.ClearAsync() IDevice.SetAllAsync(Color) IDevice.SetEffectAsync(Guid) IDevice.CurrentEffectId Namespace : Corale.Colore Assembly : Corale.Colore.dll Syntax public interface IChromaLink : IDevice Properties Item[Int32] Gets or sets the Color for a specific zone on the Chroma Link device. The SDK will translate this appropriately depending on user configuration. Declaration Color this[int index] { get; set; } Parameters Type Name Description System.Int32 index The zone to access. Property Value Type Description Color The color currently set for the specified key. Methods IsSet(Int32) Returns whether an element has had a custom color set. Declaration bool IsSet(int index) Parameters Type Name Description System.Int32 index The index to query. Returns Type Description System.Boolean true if the position has a color set that is not black, otherwise false . SetCustomAsync(Custom) Sets a Custom effect on the Chroma Link. Declaration Task<Guid> SetCustomAsync(Custom effect) Parameters Type Name Description Custom effect An instance of the Custom struct. Returns Type Description System.Threading.Tasks.Task < System.Guid > A System.Guid for the effect that was set. SetEffectAsync(Effect) Sets an effect without any parameters. Declaration Task<Guid> SetEffectAsync(Effect effect) Parameters Type Name Description Effect effect Effect options. Returns Type Description System.Threading.Tasks.Task < System.Guid > A System.Guid for the effect that was set. SetStaticAsync(Color) Sets a Static effect on the Chroma Link. Declaration Task<Guid> SetStaticAsync(Color color) Parameters Type Name Description Color color Color of the effect. Returns Type Description System.Threading.Tasks.Task < System.Guid > A System.Guid for the effect that was set. SetStaticAsync(Static) Sets a Static effect on the Chroma Link. Declaration Task<Guid> SetStaticAsync(Static effect) Parameters Type Name Description Static effect An instance of the Static struct. Returns Type Description System.Threading.Tasks.Task < System.Guid > A System.Guid for the effect that was set."
  },
  "api/Corale.Colore.IKeypad.html": {
    "href": "api/Corale.Colore.IKeypad.html",
    "title": "Interface IKeypad",
    "keywords": "Interface IKeypad Interface for keypad functions. Inherited Members IDevice.ClearAsync() IDevice.SetAllAsync(Color) IDevice.SetEffectAsync(Guid) IDevice.CurrentEffectId Namespace : Corale.Colore Assembly : Corale.Colore.dll Syntax public interface IKeypad : IDevice Properties Item[Int32, Int32] Gets or sets a color at the specified position in the keypad's grid layout. Declaration Color this[int row, int column] { get; set; } Parameters Type Name Description System.Int32 row The row to access (between 0 and MaxRows , exclusive upper-bound). System.Int32 column The column to access (between 0 and MaxColumns , exclusive upper-bound). Property Value Type Description Color The Color at the specified position. Methods IsSet(Int32, Int32) Returns whether a key has had a custom color set. Declaration bool IsSet(int row, int column) Parameters Type Name Description System.Int32 row The row to query. System.Int32 column The column to query. Returns Type Description System.Boolean true if the position has a color set that is not black, otherwise false . SetCustomAsync(Custom) Sets a Custom effect on the keypad. Declaration Task<Guid> SetCustomAsync(Custom effect) Parameters Type Name Description Custom effect An instance of the Custom struct. Returns Type Description System.Threading.Tasks.Task < System.Guid > A System.Guid for the effect that was set. SetEffectAsync(Effect) Sets an effect without any parameters. Currently, this only works for the None effect. Declaration Task<Guid> SetEffectAsync(Effect effect) Parameters Type Name Description Effect effect Effect options. Returns Type Description System.Threading.Tasks.Task < System.Guid > A System.Guid for the effect that was set. SetStaticAsync(Color) Sets a Static effect on the keypad. Declaration Task<Guid> SetStaticAsync(Color color) Parameters Type Name Description Color color Color of the effect. Returns Type Description System.Threading.Tasks.Task < System.Guid > A System.Guid for the effect that was set. SetStaticAsync(Static) Sets a Static effect on the keypad. Declaration Task<Guid> SetStaticAsync(Static effect) Parameters Type Name Description Static effect An instance of the Static struct. Returns Type Description System.Threading.Tasks.Task < System.Guid > A System.Guid for the effect that was set."
  },
  "api/Corale.Colore.IMouse.html": {
    "href": "api/Corale.Colore.IMouse.html",
    "title": "Interface IMouse",
    "keywords": "Interface IMouse Interface for mouse functionality. Inherited Members IDevice.ClearAsync() IDevice.SetAllAsync(Color) IDevice.SetEffectAsync(Guid) IDevice.CurrentEffectId Namespace : Corale.Colore Assembly : Corale.Colore.dll Syntax public interface IMouse : IDevice Properties Item[GridLed] Gets or sets the Color for a specified GridLed on the mouse's virtual grid. Declaration Color this[GridLed led] { get; set; } Parameters Type Name Description GridLed led The GridLed to query. Property Value Type Description Color The Color currently set for the specified GridLed . Item[Int32, Int32] Gets or sets the Color for a specific position on the mouse's virtual grid. Declaration Color this[int row, int column] { get; set; } Parameters Type Name Description System.Int32 row The row to query, between 0 and MaxRows (exclusive upper-bound). System.Int32 column The column to query, between 0 and MaxColumns (exclusive upper-bound). Property Value Type Description Color The Color at the specified position. Methods SetEffectAsync(Effect) Sets an effect without any parameters. Currently, this only works for the None effect. Declaration Task<Guid> SetEffectAsync(Effect effect) Parameters Type Name Description Effect effect Effect options. Returns Type Description System.Threading.Tasks.Task < System.Guid > A System.Guid for the effect that was set. SetGridAsync(Custom) Sets a custom grid effect on the mouse. Declaration Task<Guid> SetGridAsync(Custom effect) Parameters Type Name Description Custom effect An instance of the Custom struct. Returns Type Description System.Threading.Tasks.Task < System.Guid > A System.Guid for the effect that was set. SetStaticAsync(Color, Led) Sets a static effect on the mouse. Declaration Task<Guid> SetStaticAsync(Color color, Led led) Parameters Type Name Description Color color The color to use. Led led Which LED(s) to affect. Returns Type Description System.Threading.Tasks.Task < System.Guid > A System.Guid for the effect that was set. SetStaticAsync(Static) Sets a static color on the mouse. Declaration Task<Guid> SetStaticAsync(Static effect) Parameters Type Name Description Static effect An instance of the Static effect. Returns Type Description System.Threading.Tasks.Task < System.Guid > A System.Guid for the effect that was set."
  },
  "api/Corale.Colore.IMousepad.html": {
    "href": "api/Corale.Colore.IMousepad.html",
    "title": "Interface IMousepad",
    "keywords": "Interface IMousepad Interface for mouse pad functionality. Inherited Members IDevice.ClearAsync() IDevice.SetAllAsync(Color) IDevice.SetEffectAsync(Guid) IDevice.CurrentEffectId Namespace : Corale.Colore Assembly : Corale.Colore.dll Syntax public interface IMousepad : IDevice Properties Item[Int32] Gets or sets a specific LED on the mouse pad. Declaration Color this[int index] { get; set; } Parameters Type Name Description System.Int32 index The index to access. Property Value Type Description Color The current Color at the index . Methods SetCustomAsync(Custom) Sets a custom effect on the mouse pad. Declaration Task<Guid> SetCustomAsync(Custom effect) Parameters Type Name Description Custom effect An instance of the Custom struct. Returns Type Description System.Threading.Tasks.Task < System.Guid > A System.Guid for the effect that was set. SetEffectAsync(Effect) Sets an effect without any parameters. Currently, this only works for the None effect. Declaration Task<Guid> SetEffectAsync(Effect effect) Parameters Type Name Description Effect effect Effect options. Returns Type Description System.Threading.Tasks.Task < System.Guid > A System.Guid for the effect that was set. SetStaticAsync(Color) Sets a static color effect on the mouse pad. Declaration Task<Guid> SetStaticAsync(Color color) Parameters Type Name Description Color color Color to set. Returns Type Description System.Threading.Tasks.Task < System.Guid > A System.Guid for the effect that was set. SetStaticAsync(Static) Sets a static color effect on the mouse pad. Declaration Task<Guid> SetStaticAsync(Static effect) Parameters Type Name Description Static effect An instance of the Static struct. Returns Type Description System.Threading.Tasks.Task < System.Guid > A System.Guid for the effect that was set."
  },
  "api/Corale.Colore.Native.NativeCallException.html": {
    "href": "api/Corale.Colore.Native.NativeCallException.html",
    "title": "Class NativeCallException",
    "keywords": "Class NativeCallException Thrown when a native function returns an erroneous result value. Inheritance System.Exception ColoreException ApiException NativeCallException Inherited Members ApiException.Result Namespace : Corale.Colore.Native Assembly : Corale.Colore.dll Syntax public sealed class NativeCallException : ApiException Constructors NativeCallException(String, Result) Initializes a new instance of the NativeCallException class. Declaration public NativeCallException(string function, Result result) Parameters Type Name Description System.String function The name of the function that was called. Result result The result returned from the called function. Properties Function Gets the name of the native function that was called. Declaration public string Function { get; } Property Value Type Description System.String"
  }
}